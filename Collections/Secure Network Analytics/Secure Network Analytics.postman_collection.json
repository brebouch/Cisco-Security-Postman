{
	"info": {
		"_postman_id": "d02edacf-4c73-4961-9b99-54657f9b31d5",
		"name": "Secure Network Analytics",
		"description": "# Why Use these APIs?\n\nCisco Secure Network Analytics (formerly Stealthwatch) provides easy to use and comprehensive APIs for reporting, making configuration changes, managing users, exporting data, and more. Our APIs are free to allow rapid development of apps, and our open source development community is growing quickly.\n\nThe Secure Network Analytics REST APIs consist of a collection of resources for developers, administrators, or partners that enable the functionality of Secure Network Analytics to be accessed programmatically. Since Secure Network Analytics REST APIs are based on open standards, you can use any programming or scripting language you wish as long as it supports Hyper Text Transfer Protocol (HTTP). These instructions assume you have some knowledge of using REST services and a basic understanding of HTTP. Experience using either curl or wget is highly beneficial.\n\n## SOAP Information\n\nYou may also be interested in the [Stealthwatch Management Console Web Services Programming Guide]() which documents the Simple Object Access Protocol (SOAP) interface to Secure Network Analytics. With the Web Services API that is compliant with the SOAP, administrators can use Internal applications, such as Security Information and Event Management (SIEM) systems, trouble-ticketing systems, and third-party reporting systems, to access data from the management console.\n\nAfter the release of Secure Network Analytics (formerly Stealthwatch) v7.2, we began migrating from SOAP APIs to REST APIs. If you use Secure Network Analytics API suites, you should begin using REST API equivalents where available.\n\nWe do not support SOAP APIs for Secure Network Analytics with a Data Store.\n\n  \n\n# Authentication\n\nBefore you can use the Secure Network Analytics REST API, you need to authenticate. The same credentials (login/password pair) you use to log in to the user interface for Secure Network Analytics can be used for accessing the Secure Network Analytics REST API. If you do not have credentials, the first step is to contact your Secure Network Analytics administrator.\n\nYou authenticate by sending a POST request containing the password to Secure Network Analytics. Assuming your Cisco Secure Network Analytics Manager (formerly Stealthwatch Management Console) is at \"smcaddress\", the username is \"jim\" and the password is \"password123\", an example of using curl to authenticate is shown below:\n\nCODE SNIPPET\n\n``` markup\nCopycurl -s -k -c cookies.txt -d \"username=jim&password=password123\" https://smcaddress/token/v2/authenticate\n ```\n\nAssuming the credentials are good, a user session is created and a cookie (stealthwatch.jwt) is returned in the file cookies.txt. You will need to reference the cookie in subsequent calls. In v7.3.2 and later, a second cookie is returned (XSRF-TOKEN). You will need to set an HTTPS header X-XSRF-TOKEN to the value of this cookie for all HTTPS requests (with the exception of GET requests). For more information, refer to the [Stealthwatch Release Notes v7.3.2]().\n\n**NOTE:** Your user session will expire after a period of 20 minutes. This is no different to user sessions initiated through logging in via the browser. To renew your session, POST the token again.\n\n# HTTP Methods and Responses\n\nThe Secure Network Analytics APIs use conventional HTTP request methods and response codes to indicate success or failure of an API request. In general, codes in the 2xx range indicate success, codes in the 4xx range indicate an error that resulted from the provided information, and codes in the 5xx range indicate an error with our servers.\n\n## HTTP Requests\n\nUse standard HTTP requests to access the Secure Network Analytics REST API. The methods are applied consistently across all resources and should be fairly familiar to any other REST APIs you may have used:\n\n| Desired Option | HTTP Method |\n| --- | --- |\n| Read | GET |\n| Create | POST |\n| Update | PUT |\n| Delete | DELETE |\n\n**NOTE:** Not all resources support all HTTP methods. For example, some resources may only support GET.\n\n# Parameters\n\nSeveral of the REST API calls may require identifiers of various objects in the system, for example a domainId. This section describes how to obtain these identifiers.\n\nYou can get parameter information from a CLI. To get a host_id list from a Flow Collector, type this command:\n\nCODE SNIPPET\n\n``` markup\nCopygrep id= /lancope/var/sw/today/config/groups.xml | awk -F\\\" '{print $2, $4}' |awk '$1<60000'|sort -k1,1n |less\n ```\n\nTo get the domain number for a Manager (formerly Stealthwatch Management Console), type this command:\n\nCODE SNIPPET\n\n``` markup\nCopyls /lancope/var/smc/config/ | grep domain\n ```\n\nDocumentation: [https://developer.cisco.com/docs/stealthwatch/enterprise/#!why-use-these-apis]()",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "8695710",
		"_collection_link": "https://galactic-astronaut-430691.postman.co/workspace/Cisco-Security~ff5542bd-d893-4a19-ae32-6a56f151c6e7/collection/8695710-d02edacf-4c73-4961-9b99-54657f9b31d5?action=share&creator=8695710&source=collection_link"
	},
	"item": [
		{
			"name": "Reporting v1",
			"item": [
				{
					"name": "Docs",
					"item": [
						{
							"name": "Get v1 API Docs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
											"if (xsrf != \"\"){",
											"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{hostname}}/sw-reporting/v1/docs",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"sw-reporting",
										"v1",
										"docs"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Tenant",
					"item": [
						{
							"name": "List Tenants",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
											"if (xsrf != \"\"){",
											"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{hostname}}/sw-reporting/v1/tenants",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"sw-reporting",
										"v1",
										"tenants"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Tenant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
											"if (xsrf != \"\"){",
											"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{hostname}}/sw-reporting/v1/tenants/:tenant_id",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"sw-reporting",
										"v1",
										"tenants",
										":tenant_id"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Host Group",
					"item": [
						{
							"name": "List Host Groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
											"if (xsrf != \"\"){",
											"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{hostname}}/sw-reporting/v1/tenants/:tenant_id/customHosts/tags",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"sw-reporting",
										"v1",
										"tenants",
										":tenant_id",
										"customHosts",
										"tags"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get  Host Group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
											"if (xsrf != \"\"){",
											"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{hostname}}/sw-reporting/v1/tenants/:tenant_id/customHosts/tags/:tag_id",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"sw-reporting",
										"v1",
										"tenants",
										":tenant_id",
										"customHosts",
										"tags",
										":tag_id"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "tag_id",
											"value": null,
											"description": "Integer - ID of desired tag"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List Host Group Alarms",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
											"if (xsrf != \"\"){",
											"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{hostname}}/sw-reporting/v1/tenants/:tenant_id/customHosts/tags/:tag_id/alarms",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"sw-reporting",
										"v1",
										"tenants",
										":tenant_id",
										"customHosts",
										"tags",
										":tag_id",
										"alarms"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "tag_id",
											"value": null,
											"description": "Integer - ID of desired tag"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Host Group Alarm",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
											"if (xsrf != \"\"){",
											"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{hostname}}/sw-reporting/v1/tenants/:tenant_id/customHosts/tags/:tag_id/alarms/:alarm_id",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"sw-reporting",
										"v1",
										"tenants",
										":tenant_id",
										"customHosts",
										"tags",
										":tag_id",
										"alarms",
										":alarm_id"
									],
									"query": [
										{
											"key": "endAbsolute",
											"value": null,
											"description": "Integer -End time in milliseconds epoch time for the report. This parameter should be provided with either startAbsolute or startRelative.",
											"disabled": true
										},
										{
											"key": "intervalLength",
											"value": null,
											"description": "Integer - Interval is in milliseconds. This parameter is provided with either startAbsolute or startRelative.",
											"disabled": true
										},
										{
											"key": "startAbsolute",
											"value": null,
											"description": "Integer- Start time in milliseconds epoch time for the report. Given just this parameter, the end time for the report is the current time.",
											"disabled": true
										},
										{
											"key": "startRelative",
											"value": null,
											"description": "Integer - Relative start time is in milliseconds. The start time for the report is calculated by subtracting this number from the current time. Given just this parameter, the end time for the report is the current time.",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "tag_id",
											"value": null,
											"description": "Integer - ID of desired tag"
										},
										{
											"key": "alarm_id",
											"value": null,
											"description": "Integer - ID of desired alarm"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Host Group AlarmTrends",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
											"if (xsrf != \"\"){",
											"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{hostname}}/sw-reporting/v1/tenants/:tenant_id/customHosts/tags/:tag_id/alarms/:alarm_id/trend",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"sw-reporting",
										"v1",
										"tenants",
										":tenant_id",
										"customHosts",
										"tags",
										":tag_id",
										"alarms",
										":alarm_id",
										"trend"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "tag_id",
											"value": null,
											"description": "Integer - ID of desired tag"
										},
										{
											"key": "alarm_id",
											"value": null,
											"description": "Integer - ID of desired alarm"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Host Group AlarmTrends Daily",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
											"if (xsrf != \"\"){",
											"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{hostname}}/sw-reporting/v1/tenants/:tenant_id/customHosts/tags/:tag_id/alarms/:alarm_id/trend/daily",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"sw-reporting",
										"v1",
										"tenants",
										":tenant_id",
										"customHosts",
										"tags",
										":tag_id",
										"alarms",
										":alarm_id",
										"trend",
										"daily"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "tag_id",
											"value": null,
											"description": "Integer - ID of desired tag"
										},
										{
											"key": "alarm_id",
											"value": null,
											"description": "Integer - ID of desired alarm"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Host Group Top Alarming Hosts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
											"if (xsrf != \"\"){",
											"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{hostname}}/sw-reporting/v1/tenants/:tenant_id/customHosts/tags/:tag_id/alarms/topHosts",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"sw-reporting",
										"v1",
										"tenants",
										":tenant_id",
										"customHosts",
										"tags",
										":tag_id",
										"alarms",
										"topHosts"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "tag_id",
											"value": null,
											"description": "Integer - ID of desired tag"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Host Group Traffic",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
											"if (xsrf != \"\"){",
											"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{hostname}}/sw-reporting/v1/tenants/:tenant_id/customHosts/tags/:tag_id/traffic",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"sw-reporting",
										"v1",
										"tenants",
										":tenant_id",
										"customHosts",
										"tags",
										":tag_id",
										"traffic"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "tag_id",
											"value": null,
											"description": "Integer - ID of desired tag"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Host Group Traffic Hourly",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
											"if (xsrf != \"\"){",
											"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{hostname}}/sw-reporting/v1/tenants/:tenant_id/customHosts/tags/:tag_id/traffic/hourly",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"sw-reporting",
										"v1",
										"tenants",
										":tenant_id",
										"customHosts",
										"tags",
										":tag_id",
										"traffic",
										"hourly"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "tag_id",
											"value": null,
											"description": "Integer - ID of desired tag"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Host Group Traffic Raw",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
											"if (xsrf != \"\"){",
											"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{hostname}}/sw-reporting/v1/tenants/:tenant_id/customHosts/tags/:tag_id/traffic/raw",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"sw-reporting",
										"v1",
										"tenants",
										":tenant_id",
										"customHosts",
										"tags",
										":tag_id",
										"traffic",
										"raw"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "tag_id",
											"value": null,
											"description": "Integer - ID of desired tag"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Host Group Applications Traffic",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
											"if (xsrf != \"\"){",
											"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{hostname}}/sw-reporting/v1/tenants/:tenant_id/customHosts/tags/:tag_id/applications/traffic",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"sw-reporting",
										"v1",
										"tenants",
										":tenant_id",
										"customHosts",
										"tags",
										":tag_id",
										"applications",
										"traffic"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "tag_id",
											"value": null,
											"description": "Integer - ID of desired tag"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Host Group Traffic Applications Hourly",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
											"if (xsrf != \"\"){",
											"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{hostname}}/sw-reporting/v1/tenants/:tenant_id/customHosts/tags/:tag_id/applications/traffic/hourly",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"sw-reporting",
										"v1",
										"tenants",
										":tenant_id",
										"customHosts",
										"tags",
										":tag_id",
										"applications",
										"traffic",
										"hourly"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "tag_id",
											"value": null,
											"description": "Integer - ID of desired tag"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Host Group Applications Traffic Raw",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
											"if (xsrf != \"\"){",
											"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{hostname}}/sw-reporting/v1/tenants/:tenant_id/customHosts/tags/:tag_id/applications/traffic/raw",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"sw-reporting",
										"v1",
										"tenants",
										":tenant_id",
										"customHosts",
										"tags",
										":tag_id",
										"applications",
										"traffic",
										"raw"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "tag_id",
											"value": null,
											"description": "Integer - ID of desired tag"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List Host Group Applications",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
											"if (xsrf != \"\"){",
											"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{hostname}}/sw-reporting/v1/tenants/:tenant_id/customHosts/tags/:tag_id/applications",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"sw-reporting",
										"v1",
										"tenants",
										":tenant_id",
										"customHosts",
										"tags",
										":tag_id",
										"applications"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "tag_id",
											"value": null,
											"description": "Integer - ID of desired tag"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Host Group Application",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
											"if (xsrf != \"\"){",
											"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{hostname}}/sw-reporting/v1/tenants/:tenant_id/customHosts/tags/:tag_id/applications/:application_id",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"sw-reporting",
										"v1",
										"tenants",
										":tenant_id",
										"customHosts",
										"tags",
										":tag_id",
										"applications",
										":application_id"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "tag_id",
											"value": null,
											"description": "Integer - ID of desired tag"
										},
										{
											"key": "application_id",
											"value": null,
											"description": "Integer - ID of desired application"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Host Group Tree",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
											"if (xsrf != \"\"){",
											"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{hostname}}/sw-reporting/v1/tenants/:tenant_id/customHosts/tags/tree",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"sw-reporting",
										"v1",
										"tenants",
										":tenant_id",
										"customHosts",
										"tags",
										"tree"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Devices",
					"item": [
						{
							"name": "List Devices",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/devices",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"devices"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Device",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/devices/:device_id",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"devices",
										":device_id"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "device_id",
											"value": null,
											"description": "Integer - ID of desired device"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List Device Exporters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/devices/:device_id/exporters",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"devices",
										":device_id",
										"exporters"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "device_id",
											"value": null,
											"description": "Integer - ID of desired device"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Device Exporter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/devices/:device_id/exporters/:exporter_ip",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"devices",
										":device_id",
										"exporters",
										":exporter_ip"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "device_id",
											"value": null,
											"description": "Integer - ID of desired device"
										},
										{
											"key": "exporter_ip",
											"value": null,
											"description": "String - IP address of desired exporter"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List Device Exporter Interfaces",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/devices/:device_id/exporters/:exporter_ip/interface",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"devices",
										":device_id",
										"exporters",
										":exporter_ip",
										"interface"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "device_id",
											"value": null,
											"description": "Integer - ID of desired device"
										},
										{
											"key": "exporter_ip",
											"value": null,
											"description": "String - IP address of desired exporter"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Device Exporter Interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/devices/:device_id/exporters/:exporter_ip/interface/:interface_id",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"devices",
										":device_id",
										"exporters",
										":exporter_ip",
										"interface",
										":interface_id"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "device_id",
											"value": null,
											"description": "Integer - ID of desired device"
										},
										{
											"key": "exporter_ip",
											"value": null,
											"description": "String - IP address of desired exporter"
										},
										{
											"key": "interface_id",
											"value": null,
											"description": "Integer - ID for desired interface"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Device Exporter Interface Traffic",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/devices/:device_id/exporters/:exporter_ip/interface/:interface_id/traffic",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"devices",
										":device_id",
										"exporters",
										":exporter_ip",
										"interface",
										":interface_id",
										"traffic"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "device_id",
											"value": null,
											"description": "Integer - ID of desired device"
										},
										{
											"key": "exporter_ip",
											"value": null,
											"description": "String - IP address of desired exporter"
										},
										{
											"key": "interface_id",
											"value": null,
											"description": "Integer - ID for desired interface"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Device Exporter Interface Alarms",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/devices/:device_id/exporters/:exporter_ip/interface/:interface_id/alarms",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"devices",
										":device_id",
										"exporters",
										":exporter_ip",
										"interface",
										":interface_id",
										"alarms"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "device_id",
											"value": null,
											"description": "Integer - ID of desired device"
										},
										{
											"key": "exporter_ip",
											"value": null,
											"description": "String - IP address of desired exporter"
										},
										{
											"key": "interface_id",
											"value": null,
											"description": "Integer - ID for desired interface"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Device Exporter Interface Application Traffic",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/devices/:device_id/exporters/:exporter_ip/interface/:interface_id/application-traffic",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"devices",
										":device_id",
										"exporters",
										":exporter_ip",
										"interface",
										":interface_id",
										"application-traffic"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "device_id",
											"value": null,
											"description": "Integer - ID of desired device"
										},
										{
											"key": "exporter_ip",
											"value": null,
											"description": "String - IP address of desired exporter"
										},
										{
											"key": "interface_id",
											"value": null,
											"description": "Integer - ID for desired interface"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "External Hosts",
					"item": [
						{
							"name": "List External Hosts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/externalHosts",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"externalHosts"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List External Hosts Tags",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/externalHosts/tags",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"externalHosts",
										"tags"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get External Hosts Tag",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/externalHosts/tags/:tag_id",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"externalHosts",
										"tags",
										":tag_id"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "tag_id",
											"value": null,
											"description": "Integer - ID of desired tag"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List External Hosts Tag Alarms",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/externalHosts/tags/:tag_id/alarms",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"externalHosts",
										"tags",
										":tag_id",
										"alarms"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "tag_id",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get External Hosts Tag Alarm",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/externalHosts/tags/:tag_id/alarms/:alarm_type_id",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"externalHosts",
										"tags",
										":tag_id",
										"alarms",
										":alarm_type_id"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "tag_id",
											"value": null,
											"description": "Integer - ID of desired alarm"
										},
										{
											"key": "alarm_type_id",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get External Hosts Tag Alarm Trend",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/externalHosts/tags/:tag_id/alarms/:alarm_type_id/trend",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"externalHosts",
										"tags",
										":tag_id",
										"alarms",
										":alarm_type_id",
										"trend"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "tag_id",
											"value": null,
											"description": "Integer - ID of desired alarm"
										},
										{
											"key": "alarm_type_id",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get External Hosts Tag Alarm Trend Daily",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/externalHosts/tags/:tag_id/alarms/:alarm_type_id/trend/daily",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"externalHosts",
										"tags",
										":tag_id",
										"alarms",
										":alarm_type_id",
										"trend",
										"daily"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "tag_id",
											"value": null,
											"description": "Integer - ID of desired alarm"
										},
										{
											"key": "alarm_type_id",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get External Hosts Tag Alarm Top Hosts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/externalHosts/tags/:tag_id/alarms/topHosts",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"externalHosts",
										"tags",
										":tag_id",
										"alarms",
										"topHosts"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "tag_id",
											"value": null,
											"description": "Integer - ID of desired alarm"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get External Hosts Tag Traffic",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/externalHosts/tags/:tag_id/traffic",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"externalHosts",
										"tags",
										":tag_id",
										"traffic"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "tag_id",
											"value": null,
											"description": "Integer - ID of desired alarm"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get External Hosts Tag Traffic Hourly",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/externalHosts/tags/:tag_id/traffic/hourly",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"externalHosts",
										"tags",
										":tag_id",
										"traffic",
										"hourly"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "tag_id",
											"value": null,
											"description": "Integer - ID of desired alarm"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get External Hosts Tag Traffic Hourly Raw",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/externalHosts/tags/:tag_id/traffic/hourly/raw",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"externalHosts",
										"tags",
										":tag_id",
										"traffic",
										"hourly",
										"raw"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "tag_id",
											"value": null,
											"description": "Integer - ID of desired alarm"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List External Hosts Tag Applications",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/externalHosts/tags/:tag_id/applications",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"externalHosts",
										"tags",
										":tag_id",
										"applications"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "tag_id",
											"value": null,
											"description": "Integer - ID of desired alarm"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List External Hosts Tag Applications Traffic",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/externalHosts/tags/:tag_id/applications",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"externalHosts",
										"tags",
										":tag_id",
										"applications"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "tag_id",
											"value": null,
											"description": "Integer - ID of desired alarm"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List External Hosts Tag Applications Traffic Hourly",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/externalHosts/tags/:tag_id/applications/traffic/hourly",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"externalHosts",
										"tags",
										":tag_id",
										"applications",
										"traffic",
										"hourly"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "tag_id",
											"value": null,
											"description": "Integer - ID of desired alarm"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List External Hosts Tag Applications Traffic Raw",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/externalHosts/tags/:tag_id/applications/traffic/raw",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"externalHosts",
										"tags",
										":tag_id",
										"applications",
										"traffic",
										"raw"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "tag_id",
											"value": null,
											"description": "Integer - ID of desired alarm"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get External Hosts Tag Application",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/externalHosts/tags/:tag_id/applications/:application_id",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"externalHosts",
										"tags",
										":tag_id",
										"applications",
										":application_id"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "tag_id",
											"value": null,
											"description": "Integer - ID of desired alarm"
										},
										{
											"key": "application_id",
											"value": null,
											"description": "Integer - ID of desired application"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get External Hosts Tag Application Traffic",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/externalHosts/tags/:tag_id/applications/:application_id/traffic",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"externalHosts",
										"tags",
										":tag_id",
										"applications",
										":application_id",
										"traffic"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "tag_id",
											"value": null,
											"description": "Integer - ID of desired alarm"
										},
										{
											"key": "application_id",
											"value": null,
											"description": "Integer - ID of desired application"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get External Hosts Tag Application Traffic Hourly",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/externalHosts/tags/:tag_id/applications/:application_id/traffic/hourly",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"externalHosts",
										"tags",
										":tag_id",
										"applications",
										":application_id",
										"traffic",
										"hourly"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "tag_id",
											"value": null,
											"description": "Integer - ID of desired alarm"
										},
										{
											"key": "application_id",
											"value": null,
											"description": "Integer - ID of desired application"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get External Hosts Tag Application Traffic Raw",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/externalHosts/tags/:tag_id/applications/:application_id/traffic/raw",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"externalHosts",
										"tags",
										":tag_id",
										"applications",
										":application_id",
										"traffic",
										"raw"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "tag_id",
											"value": null,
											"description": "Integer - ID of desired alarm"
										},
										{
											"key": "application_id",
											"value": null,
											"description": "Integer - ID of desired application"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get External Hosts Tag Tree",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/externalHosts/tags/tree",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"externalHosts",
										"tags",
										"tree"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List External Hosts Alarms",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/externalHosts/alarms",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"externalHosts",
										"alarms"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get External Hosts Alarm",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/externalHosts/alarms/:alarm_id",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"externalHosts",
										"alarms",
										":alarm_id"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null
										},
										{
											"key": "alarm_id",
											"value": null,
											"description": "Integer - ID of desired alarm"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get External Hosts Alarm Trend",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/externalHosts/alarms/:alarm_id/trend",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"externalHosts",
										"alarms",
										":alarm_id",
										"trend"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null
										},
										{
											"key": "alarm_id",
											"value": null,
											"description": "Integer - ID of desired alarm"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get External Hosts Alarm Trend Daily",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/externalHosts/alarms/:alarm_id/trend/daily",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"externalHosts",
										"alarms",
										":alarm_id",
										"trend",
										"daily"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "alarm_id",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get External Hosts Alarms Top Hosts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/externalHosts/alarms/topHosts",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"externalHosts",
										"alarms",
										"topHosts"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get External Hosts Traffic",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/externalHosts/traffic",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"externalHosts",
										"traffic"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get External Hosts Traffic Hourly",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/externalHosts/traffic/hourly",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"externalHosts",
										"traffic",
										"hourly"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get External Hosts Traffic Hourly Raw",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/externalHosts/traffic/raw",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"externalHosts",
										"traffic",
										"raw"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Flow Reports",
					"item": [
						{
							"name": "Top Ports",
							"item": [
								{
									"name": "Create Flow Reports Top Ports Query",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
													"if (xsrf != \"\"){",
													"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"searchName\": \"Top Reports on 3/1/2017 at 12:36 PM\",\n    \"startTime\": \"2017-03-10T00:00:00.000\",\n    \"endTime\": \"2017-03-10T00:05:00.000\",\n    \"connection\": {\n        \"applications\": {\n            \"includes\": [\n                103119\n            ],\n            \"excludes\": [\n                2000\n            ]\n        },\n        \"direction\": \"INBOUND_PLUS_OUTBOUND\",\n        \"portProtocols\": {\n            \"includes\": [\n                \"70/tcp\"\n            ],\n            \"excludes\": [\n                \"80/tcp\"\n            ]\n        }\n    },\n    \"subject\": {\n        \"tags\": {\n            \"includes\": [\n                63000\n            ],\n            \"excludes\": [\n                63006\n            ]\n        },\n        \"ipAddresses\": {\n            \"includes\": [\n                \"10.20.11.11\"\n            ],\n            \"excludes\": []\n        }\n    },\n    \"peer\": {\n        \"tags\": {\n            \"includes\": [\n                47\n            ],\n            \"excludes\": [\n                60000\n            ]\n        },\n        \"ipAddresses\": {\n            \"includes\": [],\n            \"excludes\": [\n                \"10.20.11.12\"\n            ]\n        }\n    },\n    \"orientation\": \"either\",\n    \"maxRows\": 50,\n    \"flowCollectors\": [\n        \"162\"\n    ],\n    \"orderBy\": \"TOTAL_BYTES\",\n    \"excludeBpsPps\": true,\n    \"excludeOthers\": true,\n    \"excludeCounts\": false,\n    \"standardOptions\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{hostname}}/sw-reporting/v1/tenants/:tenant_id/flow-reports/top-ports/queries",
											"protocol": "https",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"sw-reporting",
												"v1",
												"tenants",
												":tenant_id",
												"flow-reports",
												"top-ports",
												"queries"
											],
											"variable": [
												{
													"key": "tenant_id",
													"value": null,
													"description": "Integer - ID of desired tenant"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Flow Reports Top Ports Query Status",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
													"if (xsrf != \"\"){",
													"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {},
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{hostname}}/sw-reporting/v1/tenants/:tenant_id/flow-reports/top-ports/queries/:query_id",
											"protocol": "https",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"sw-reporting",
												"v1",
												"tenants",
												":tenant_id",
												"flow-reports",
												"top-ports",
												"queries",
												":query_id"
											],
											"variable": [
												{
													"key": "tenant_id",
													"value": null,
													"description": "Integer - ID of desired tenant"
												},
												{
													"key": "query_id",
													"value": null,
													"description": "Integer - ID of desired query"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Flow Reports Top Ports Query Results",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
													"if (xsrf != \"\"){",
													"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {},
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{hostname}}/sw-reporting/v1/tenants/:tenant_id/flow-reports/top-ports/results/:query_id",
											"protocol": "https",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"sw-reporting",
												"v1",
												"tenants",
												":tenant_id",
												"flow-reports",
												"top-ports",
												"results",
												":query_id"
											],
											"variable": [
												{
													"key": "tenant_id",
													"value": null,
													"description": "Integer - ID of desired tenant"
												},
												{
													"key": "query_id",
													"value": null,
													"description": "Integer - ID of desired query"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Top Protocols",
							"item": [
								{
									"name": "Create Flow Reports Top Protocols Query",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
													"if (xsrf != \"\"){",
													"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"searchName\": \"Top Reports on 3/1/2017 at 12:36 PM\",\n    \"startTime\": \"2017-03-10T00:00:00.000\",\n    \"endTime\": \"2017-03-10T00:05:00.000\",\n    \"connection\": {\n        \"applications\": {\n            \"includes\": [\n                103119\n            ],\n            \"excludes\": [\n                2000\n            ]\n        },\n        \"direction\": \"INBOUND_PLUS_OUTBOUND\",\n        \"portProtocols\": {\n            \"includes\": [\n                \"70/tcp\"\n            ],\n            \"excludes\": [\n                \"80/tcp\"\n            ]\n        }\n    },\n    \"subject\": {\n        \"tags\": {\n            \"includes\": [\n                63000\n            ],\n            \"excludes\": [\n                63006\n            ]\n        },\n        \"ipAddresses\": {\n            \"includes\": [\n                \"10.20.11.11\"\n            ],\n            \"excludes\": []\n        }\n    },\n    \"peer\": {\n        \"tags\": {\n            \"includes\": [\n                47\n            ],\n            \"excludes\": [\n                60000\n            ]\n        },\n        \"ipAddresses\": {\n            \"includes\": [],\n            \"excludes\": [\n                \"10.20.11.12\"\n            ]\n        }\n    },\n    \"orientation\": \"either\",\n    \"maxRows\": 50,\n    \"flowCollectors\": [\n        \"162\"\n    ],\n    \"orderBy\": \"TOTAL_BYTES\",\n    \"excludeBpsPps\": true,\n    \"excludeOthers\": true,\n    \"excludeCounts\": false,\n    \"standardOptions\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{hostname}}/sw-reporting/v1/tenants/:tenant_id/flow-reports/top-protocols/queries",
											"protocol": "https",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"sw-reporting",
												"v1",
												"tenants",
												":tenant_id",
												"flow-reports",
												"top-protocols",
												"queries"
											],
											"variable": [
												{
													"key": "tenant_id",
													"value": null,
													"description": "Integer - ID of desired tenant"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Flow Reports Top Protocols Query Status",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
													"if (xsrf != \"\"){",
													"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {},
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{hostname}}/sw-reporting/v1/tenants/:tenant_id/flow-reports/top-protocols/queries/:query_id",
											"protocol": "https",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"sw-reporting",
												"v1",
												"tenants",
												":tenant_id",
												"flow-reports",
												"top-protocols",
												"queries",
												":query_id"
											],
											"variable": [
												{
													"key": "tenant_id",
													"value": null,
													"description": "Integer - ID of desired tenant"
												},
												{
													"key": "query_id",
													"value": null,
													"description": "Integer - ID of desired query"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Flow Reports Top Protocols Query Results",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
													"if (xsrf != \"\"){",
													"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {},
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{hostname}}/sw-reporting/v1/tenants/:tenant_id/flow-reports/top-protocols/results/:query_id",
											"protocol": "https",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"sw-reporting",
												"v1",
												"tenants",
												":tenant_id",
												"flow-reports",
												"top-protocols",
												"results",
												":query_id"
											],
											"variable": [
												{
													"key": "tenant_id",
													"value": null,
													"description": "Integer - ID of desired tenant"
												},
												{
													"key": "query_id",
													"value": null,
													"description": "Integer - ID of desired query"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Top Hosts",
							"item": [
								{
									"name": "Create Flow Reports Top Hosts Query",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
													"if (xsrf != \"\"){",
													"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"searchName\": \"Top Reports on 3/1/2017 at 12:36 PM\",\n    \"startTime\": \"2017-03-10T00:00:00.000\",\n    \"endTime\": \"2017-03-10T00:05:00.000\",\n    \"connection\": {\n        \"applications\": {\n            \"includes\": [\n                103119\n            ],\n            \"excludes\": [\n                2000\n            ]\n        },\n        \"direction\": \"INBOUND_PLUS_OUTBOUND\",\n        \"portProtocols\": {\n            \"includes\": [\n                \"70/tcp\"\n            ],\n            \"excludes\": [\n                \"80/tcp\"\n            ]\n        }\n    },\n    \"subject\": {\n        \"tags\": {\n            \"includes\": [\n                63000\n            ],\n            \"excludes\": [\n                63006\n            ]\n        },\n        \"ipAddresses\": {\n            \"includes\": [\n                \"10.20.11.11\"\n            ],\n            \"excludes\": []\n        }\n    },\n    \"peer\": {\n        \"tags\": {\n            \"includes\": [\n                47\n            ],\n            \"excludes\": [\n                60000\n            ]\n        },\n        \"ipAddresses\": {\n            \"includes\": [],\n            \"excludes\": [\n                \"10.20.11.12\"\n            ]\n        }\n    },\n    \"orientation\": \"either\",\n    \"maxRows\": 50,\n    \"flowCollectors\": [\n        \"162\"\n    ],\n    \"orderBy\": \"TOTAL_BYTES\",\n    \"excludeBpsPps\": true,\n    \"excludeOthers\": true,\n    \"excludeCounts\": false,\n    \"standardOptions\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{hostname}}/sw-reporting/v1/tenants/:tenant_id/flow-reports/top-hosts/queries",
											"protocol": "https",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"sw-reporting",
												"v1",
												"tenants",
												":tenant_id",
												"flow-reports",
												"top-hosts",
												"queries"
											],
											"variable": [
												{
													"key": "tenant_id",
													"value": null,
													"description": "Integer - ID of desired tenant"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Flow Reports Top Hosts Query Status",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
													"if (xsrf != \"\"){",
													"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {},
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{hostname}}/sw-reporting/v1/tenants/:tenant_id/flow-reports/top-hosts/queries/:query_id",
											"protocol": "https",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"sw-reporting",
												"v1",
												"tenants",
												":tenant_id",
												"flow-reports",
												"top-hosts",
												"queries",
												":query_id"
											],
											"variable": [
												{
													"key": "tenant_id",
													"value": null,
													"description": "Integer - ID of desired tenant"
												},
												{
													"key": "query_id",
													"value": null,
													"description": "Integer - ID of desired query"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Flow Reports Top Hosts Query Results",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
													"if (xsrf != \"\"){",
													"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {},
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{hostname}}/sw-reporting/v1/tenants/:tenant_id/flow-reports/top-hosts/results/:query_id",
											"protocol": "https",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"sw-reporting",
												"v1",
												"tenants",
												":tenant_id",
												"flow-reports",
												"top-hosts",
												"results",
												":query_id"
											],
											"variable": [
												{
													"key": "tenant_id",
													"value": null,
													"description": "Integer - ID of desired tenant"
												},
												{
													"key": "query_id",
													"value": null,
													"description": "Integer - ID of desired query"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Top Peers",
							"item": [
								{
									"name": "Create Flow Reports Top Peers Query",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
													"if (xsrf != \"\"){",
													"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"searchName\": \"Top Reports on 3/1/2017 at 12:36 PM\",\n    \"startTime\": \"2017-03-10T00:00:00.000\",\n    \"endTime\": \"2017-03-10T00:05:00.000\",\n    \"connection\": {\n        \"applications\": {\n            \"includes\": [\n                103119\n            ],\n            \"excludes\": [\n                2000\n            ]\n        },\n        \"direction\": \"INBOUND_PLUS_OUTBOUND\",\n        \"portProtocols\": {\n            \"includes\": [\n                \"70/tcp\"\n            ],\n            \"excludes\": [\n                \"80/tcp\"\n            ]\n        }\n    },\n    \"subject\": {\n        \"tags\": {\n            \"includes\": [\n                63000\n            ],\n            \"excludes\": [\n                63006\n            ]\n        },\n        \"ipAddresses\": {\n            \"includes\": [\n                \"10.20.11.11\"\n            ],\n            \"excludes\": []\n        }\n    },\n    \"peer\": {\n        \"tags\": {\n            \"includes\": [\n                47\n            ],\n            \"excludes\": [\n                60000\n            ]\n        },\n        \"ipAddresses\": {\n            \"includes\": [],\n            \"excludes\": [\n                \"10.20.11.12\"\n            ]\n        }\n    },\n    \"orientation\": \"either\",\n    \"maxRows\": 50,\n    \"flowCollectors\": [\n        \"162\"\n    ],\n    \"orderBy\": \"TOTAL_BYTES\",\n    \"excludeBpsPps\": true,\n    \"excludeOthers\": true,\n    \"excludeCounts\": false,\n    \"standardOptions\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{hostname}}/sw-reporting/v1/tenants/:tenant_id/flow-reports/top-peers/queries",
											"protocol": "https",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"sw-reporting",
												"v1",
												"tenants",
												":tenant_id",
												"flow-reports",
												"top-peers",
												"queries"
											],
											"variable": [
												{
													"key": "tenant_id",
													"value": null,
													"description": "Integer - ID of desired tenant"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Flow Reports Top Peers Query Status",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
													"if (xsrf != \"\"){",
													"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {},
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{hostname}}/sw-reporting/v1/tenants/:tenant_id/flow-reports/top-peers/queries/:query_id",
											"protocol": "https",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"sw-reporting",
												"v1",
												"tenants",
												":tenant_id",
												"flow-reports",
												"top-peers",
												"queries",
												":query_id"
											],
											"variable": [
												{
													"key": "tenant_id",
													"value": null,
													"description": "Integer - ID of desired tenant"
												},
												{
													"key": "query_id",
													"value": null,
													"description": "Integer - ID of desired query"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Flow Reports Top Peers Query Results",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
													"if (xsrf != \"\"){",
													"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {},
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{hostname}}/sw-reporting/v1/tenants/:tenant_id/flow-reports/top-peers/results/:query_id",
											"protocol": "https",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"sw-reporting",
												"v1",
												"tenants",
												":tenant_id",
												"flow-reports",
												"top-peers",
												"results",
												":query_id"
											],
											"variable": [
												{
													"key": "tenant_id",
													"value": null,
													"description": "Integer - ID of desired tenant"
												},
												{
													"key": "query_id",
													"value": null,
													"description": "Integer - ID of desired query"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Top Conversations",
							"item": [
								{
									"name": "Create Flow Reports Top Conversations",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
													"if (xsrf != \"\"){",
													"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"searchName\": \"Top Reports on 3/1/2017 at 12:36 PM\",\n    \"startTime\": \"2017-03-10T00:00:00.000\",\n    \"endTime\": \"2017-03-10T00:05:00.000\",\n    \"connection\": {\n        \"applications\": {\n            \"includes\": [\n                103119\n            ],\n            \"excludes\": [\n                2000\n            ]\n        },\n        \"direction\": \"INBOUND_PLUS_OUTBOUND\",\n        \"portProtocols\": {\n            \"includes\": [\n                \"70/tcp\"\n            ],\n            \"excludes\": [\n                \"80/tcp\"\n            ]\n        }\n    },\n    \"subject\": {\n        \"tags\": {\n            \"includes\": [\n                63000\n            ],\n            \"excludes\": [\n                63006\n            ]\n        },\n        \"ipAddresses\": {\n            \"includes\": [\n                \"10.20.11.11\"\n            ],\n            \"excludes\": []\n        }\n    },\n    \"peer\": {\n        \"tags\": {\n            \"includes\": [\n                47\n            ],\n            \"excludes\": [\n                60000\n            ]\n        },\n        \"ipAddresses\": {\n            \"includes\": [],\n            \"excludes\": [\n                \"10.20.11.12\"\n            ]\n        }\n    },\n    \"orientation\": \"either\",\n    \"maxRows\": 50,\n    \"flowCollectors\": [\n        \"162\"\n    ],\n    \"orderBy\": \"TOTAL_BYTES\",\n    \"excludeBpsPps\": true,\n    \"excludeOthers\": true,\n    \"excludeCounts\": false,\n    \"standardOptions\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{hostname}}/sw-reporting/v1/tenants/:tenant_id/flow-reports/top-conversations/queries",
											"protocol": "https",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"sw-reporting",
												"v1",
												"tenants",
												":tenant_id",
												"flow-reports",
												"top-conversations",
												"queries"
											],
											"variable": [
												{
													"key": "tenant_id",
													"value": null,
													"description": "Integer - ID of desired tenant"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Flow Reports Top Conversations Query Status",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
													"if (xsrf != \"\"){",
													"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {},
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{hostname}}/sw-reporting/v1/tenants/:tenant_id/flow-reports/top-conversations/queries/:query_id",
											"protocol": "https",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"sw-reporting",
												"v1",
												"tenants",
												":tenant_id",
												"flow-reports",
												"top-conversations",
												"queries",
												":query_id"
											],
											"variable": [
												{
													"key": "tenant_id",
													"value": null,
													"description": "Integer - ID of desired tenant"
												},
												{
													"key": "query_id",
													"value": null,
													"description": "Integer - ID of desired query"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Flow Reports Top Conversations Query Results",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
													"if (xsrf != \"\"){",
													"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {},
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{hostname}}/sw-reporting/v1/tenants/:tenant_id/flow-reports/top-conversations/results/:query_id",
											"protocol": "https",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"sw-reporting",
												"v1",
												"tenants",
												":tenant_id",
												"flow-reports",
												"top-conversations",
												"results",
												":query_id"
											],
											"variable": [
												{
													"key": "tenant_id",
													"value": null,
													"description": "Integer - ID of desired tenant"
												},
												{
													"key": "query_id",
													"value": null,
													"description": "Integer - ID of desired query"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Top Services",
							"item": [
								{
									"name": "Create Flow Reports Top Services",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
													"if (xsrf != \"\"){",
													"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"searchName\": \"Top Reports on 3/1/2017 at 12:36 PM\",\n    \"startTime\": \"2017-03-10T00:00:00.000\",\n    \"endTime\": \"2017-03-10T00:05:00.000\",\n    \"connection\": {\n        \"applications\": {\n            \"includes\": [\n                103119\n            ],\n            \"excludes\": [\n                2000\n            ]\n        },\n        \"direction\": \"INBOUND_PLUS_OUTBOUND\",\n        \"portProtocols\": {\n            \"includes\": [\n                \"70/tcp\"\n            ],\n            \"excludes\": [\n                \"80/tcp\"\n            ]\n        }\n    },\n    \"subject\": {\n        \"tags\": {\n            \"includes\": [\n                63000\n            ],\n            \"excludes\": [\n                63006\n            ]\n        },\n        \"ipAddresses\": {\n            \"includes\": [\n                \"10.20.11.11\"\n            ],\n            \"excludes\": []\n        }\n    },\n    \"peer\": {\n        \"tags\": {\n            \"includes\": [\n                47\n            ],\n            \"excludes\": [\n                60000\n            ]\n        },\n        \"ipAddresses\": {\n            \"includes\": [],\n            \"excludes\": [\n                \"10.20.11.12\"\n            ]\n        }\n    },\n    \"orientation\": \"either\",\n    \"maxRows\": 50,\n    \"flowCollectors\": [\n        \"162\"\n    ],\n    \"orderBy\": \"TOTAL_BYTES\",\n    \"excludeBpsPps\": true,\n    \"excludeOthers\": true,\n    \"excludeCounts\": false,\n    \"standardOptions\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{hostname}}/sw-reporting/v1/tenants/:tenant_id/flow-reports/top-services/queries",
											"protocol": "https",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"sw-reporting",
												"v1",
												"tenants",
												":tenant_id",
												"flow-reports",
												"top-services",
												"queries"
											],
											"variable": [
												{
													"key": "tenant_id",
													"value": null,
													"description": "Integer - ID of desired tenant"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Flow Reports Top Services Query Status",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
													"if (xsrf != \"\"){",
													"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {},
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{hostname}}/sw-reporting/v1/tenants/:tenant_id/flow-reports/top-services/queries/:query_id",
											"protocol": "https",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"sw-reporting",
												"v1",
												"tenants",
												":tenant_id",
												"flow-reports",
												"top-services",
												"queries",
												":query_id"
											],
											"variable": [
												{
													"key": "tenant_id",
													"value": null,
													"description": "Integer - ID of desired tenant"
												},
												{
													"key": "query_id",
													"value": null,
													"description": "Integer - ID of desired query"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Flow Reports Top Services Query Results",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
													"if (xsrf != \"\"){",
													"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {},
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{hostname}}/sw-reporting/v1/tenants/:tenant_id/flow-reports/top-services/results/:query_id",
											"protocol": "https",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"sw-reporting",
												"v1",
												"tenants",
												":tenant_id",
												"flow-reports",
												"top-services",
												"results",
												":query_id"
											],
											"variable": [
												{
													"key": "tenant_id",
													"value": null,
													"description": "Integer - ID of desired tenant"
												},
												{
													"key": "query_id",
													"value": null,
													"description": "Integer - ID of desired query"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Internal Geos",
					"item": [
						{
							"name": "List Internal Geo's",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/externalGeos",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"externalGeos"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List Internal Geo's Tags",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/externalGeos/tags",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"externalGeos",
										"tags"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Internal Geo's Tag",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/externalGeos/tags/:tag_id",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"externalGeos",
										"tags",
										":tag_id"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "tag_id",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List Internal Geo's Tag Alarms",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/externalGeos/tags/:tag_id/alarms",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"externalGeos",
										"tags",
										":tag_id",
										"alarms"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "tag_id",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Internal Geo's Tag Alarm",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/externalGeos/tags/:tag_id/alarms/:alarm_id",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"externalGeos",
										"tags",
										":tag_id",
										"alarms",
										":alarm_id"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "tag_id",
											"value": null,
											"description": "Integer - ID of desired alarm"
										},
										{
											"key": "alarm_id",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Internal Geo's Tag Alarm Trend",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/externalGeos/tags/:tag_id/alarms/:alarm_id/trend",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"externalGeos",
										"tags",
										":tag_id",
										"alarms",
										":alarm_id",
										"trend"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "tag_id",
											"value": null,
											"description": "Integer - ID of desired alarm"
										},
										{
											"key": "alarm_id",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Internal Geo's Tag Alarm Trend Daily",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/externalGeos/tags/:tag_id/alarms/:alarm_id/trend/daily",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"externalGeos",
										"tags",
										":tag_id",
										"alarms",
										":alarm_id",
										"trend",
										"daily"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "tag_id",
											"value": null,
											"description": "Integer - ID of desired alarm"
										},
										{
											"key": "alarm_id",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Internal Geo's Tag Alarm Top Hosts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/externalGeos/tags/:tag_id/alarms/topHosts",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"externalGeos",
										"tags",
										":tag_id",
										"alarms",
										"topHosts"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "tag_id",
											"value": null,
											"description": "Integer - ID of desired alarm"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Internal Geo's Tag Traffic",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/externalGeos/tags/:tag_id/traffic",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"externalGeos",
										"tags",
										":tag_id",
										"traffic"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "tag_id",
											"value": null,
											"description": "Integer - ID of desired alarm"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Internal Geo's Tag Traffic Hourly",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/externalGeos/tags/:tag_id/traffic/hourly",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"externalGeos",
										"tags",
										":tag_id",
										"traffic",
										"hourly"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "tag_id",
											"value": null,
											"description": "Integer - ID of desired alarm"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Internal Geo's Tag Traffic Hourly Raw",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/externalGeos/tags/:tag_id/traffic/hourly/raw",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"externalGeos",
										"tags",
										":tag_id",
										"traffic",
										"hourly",
										"raw"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "tag_id",
											"value": null,
											"description": "Integer - ID of desired alarm"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List Internal Geo's Tag Applications",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/externalGeos/tags/:tag_id/applications",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"externalGeos",
										"tags",
										":tag_id",
										"applications"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "tag_id",
											"value": null,
											"description": "Integer - ID of desired alarm"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List Internal Geo's Tag Applications Traffic",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/externalGeos/tags/:tag_id/applications",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"externalGeos",
										"tags",
										":tag_id",
										"applications"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "tag_id",
											"value": null,
											"description": "Integer - ID of desired alarm"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List Internal Geo's Tag Applications Traffic Hourly",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/externalGeos/tags/:tag_id/applications/traffic/hourly",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"externalGeos",
										"tags",
										":tag_id",
										"applications",
										"traffic",
										"hourly"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "tag_id",
											"value": null,
											"description": "Integer - ID of desired alarm"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List Internal Geo's Tag Applications Traffic Raw",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/externalGeos/tags/:tag_id/applications/traffic/raw",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"externalGeos",
										"tags",
										":tag_id",
										"applications",
										"traffic",
										"raw"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "tag_id",
											"value": null,
											"description": "Integer - ID of desired alarm"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Internal Geo's Tag Application",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/externalGeos/tags/:tag_id/applications/:application_id",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"externalGeos",
										"tags",
										":tag_id",
										"applications",
										":application_id"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "tag_id",
											"value": null,
											"description": "Integer - ID of desired alarm"
										},
										{
											"key": "application_id",
											"value": null,
											"description": "Integer - ID of desired application"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Internal Geo's Tag Application Traffic",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/externalGeos/tags/:tag_id/applications/:application_id/traffic",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"externalGeos",
										"tags",
										":tag_id",
										"applications",
										":application_id",
										"traffic"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "tag_id",
											"value": null,
											"description": "Integer - ID of desired alarm"
										},
										{
											"key": "application_id",
											"value": null,
											"description": "Integer - ID of desired application"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Internal Geo's Tag Application Traffic Hourly",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/externalGeos/tags/:tag_id/applications/:application_id/traffic/hourly",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"externalGeos",
										"tags",
										":tag_id",
										"applications",
										":application_id",
										"traffic",
										"hourly"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "tag_id",
											"value": null,
											"description": "Integer - ID of desired alarm"
										},
										{
											"key": "application_id",
											"value": null,
											"description": "Integer - ID of desired application"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Internal Geo's Tag Application Traffic Raw",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/externalGeos/tags/:tag_id/applications/:application_id/traffic/raw",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"externalGeos",
										"tags",
										":tag_id",
										"applications",
										":application_id",
										"traffic",
										"raw"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "tag_id",
											"value": null,
											"description": "Integer - ID of desired alarm"
										},
										{
											"key": "application_id",
											"value": null,
											"description": "Integer - ID of desired application"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Internal Geo's Tag Tree",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/externalGeos/tags/tree",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"externalGeos",
										"tags",
										"tree"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List Internal Geo's Alarms",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/externalGeos/alarms",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"externalGeos",
										"alarms"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Internal Geo's Alarm",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/externalGeos/alarms/:alarm_id",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"externalGeos",
										"alarms",
										":alarm_id"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null
										},
										{
											"key": "alarm_id",
											"value": null,
											"description": "Integer - ID of desired alarm"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Internal Geo's Alarm Trend",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/externalGeos/alarms/:alarm_id/trend",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"externalGeos",
										"alarms",
										":alarm_id",
										"trend"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null
										},
										{
											"key": "alarm_id",
											"value": null,
											"description": "Integer - ID of desired alarm"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Internal Geo's Alarm Trend Daily",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/externalGeos/alarms/:alarm_id/trend/daily",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"externalGeos",
										"alarms",
										":alarm_id",
										"trend",
										"daily"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "alarm_id",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Internal Geo's Alarms Top Hosts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/externalGeos/alarms/topHosts",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"externalGeos",
										"alarms",
										"topHosts"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Internal Geo's Traffic",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/externalGeos/traffic",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"externalGeos",
										"traffic"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Internal Geo's Traffic Hourly",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/externalGeos/traffic/hourly",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"externalGeos",
										"traffic",
										"hourly"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Internal Geo's Traffic Hourly Raw",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/externalGeos/traffic/raw",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"externalGeos",
										"traffic",
										"raw"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Internal Hosts",
					"item": [
						{
							"name": "List Internal Hosts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/internalHosts",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"internalHosts"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List Internal Hosts Tags",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/internalHosts/tags",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"internalHosts",
										"tags"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Internal Hosts Tag",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/internalHosts/tags/:tag_id",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"internalHosts",
										"tags",
										":tag_id"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "tag_id",
											"value": null,
											"description": "Integer - ID of desired tag"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List Internal Hosts Tag Alarms",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/internalHosts/tags/:tag_id/alarms",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"internalHosts",
										"tags",
										":tag_id",
										"alarms"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "tag_id",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Internal Hosts Tag Alarm",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/internalHosts/tags/:tag_id/alarms/:alarm_type_id",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"internalHosts",
										"tags",
										":tag_id",
										"alarms",
										":alarm_type_id"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "tag_id",
											"value": null,
											"description": "Integer - ID of desired alarm"
										},
										{
											"key": "alarm_type_id",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Internal Hosts Tag Alarm Trend",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/internalHosts/tags/:tag_id/alarms/:alarm_type_id/trend",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"internalHosts",
										"tags",
										":tag_id",
										"alarms",
										":alarm_type_id",
										"trend"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "tag_id",
											"value": null,
											"description": "Integer - ID of desired alarm"
										},
										{
											"key": "alarm_type_id",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Internal Hosts Tag Alarm Trend Daily",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/internalHosts/tags/:tag_id/alarms/:alarm_type_id/trend/daily",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"internalHosts",
										"tags",
										":tag_id",
										"alarms",
										":alarm_type_id",
										"trend",
										"daily"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "tag_id",
											"value": null,
											"description": "Integer - ID of desired alarm"
										},
										{
											"key": "alarm_type_id",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Internal Hosts Tag Alarm Top Hosts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/internalHosts/tags/:tag_id/alarms/topHosts",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"internalHosts",
										"tags",
										":tag_id",
										"alarms",
										"topHosts"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "tag_id",
											"value": null,
											"description": "Integer - ID of desired alarm"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Internal Hosts Tag Traffic",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/internalHosts/tags/:tag_id/traffic",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"internalHosts",
										"tags",
										":tag_id",
										"traffic"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "tag_id",
											"value": null,
											"description": "Integer - ID of desired alarm"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Internal Hosts Tag Traffic Hourly",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/internalHosts/tags/:tag_id/traffic/hourly",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"internalHosts",
										"tags",
										":tag_id",
										"traffic",
										"hourly"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "tag_id",
											"value": null,
											"description": "Integer - ID of desired alarm"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Internal Hosts Tag Traffic Hourly Raw",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/internalHosts/tags/:tag_id/traffic/hourly/raw",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"internalHosts",
										"tags",
										":tag_id",
										"traffic",
										"hourly",
										"raw"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "tag_id",
											"value": null,
											"description": "Integer - ID of desired alarm"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List Internal Hosts Tag Applications",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/internalHosts/tags/:tag_id/applications",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"internalHosts",
										"tags",
										":tag_id",
										"applications"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "tag_id",
											"value": null,
											"description": "Integer - ID of desired alarm"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List Internal Hosts Tag Applications Traffic",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/internalHosts/tags/:tag_id/applications",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"internalHosts",
										"tags",
										":tag_id",
										"applications"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "tag_id",
											"value": null,
											"description": "Integer - ID of desired alarm"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List Internal Hosts Tag Applications Traffic Hourly",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/internalHosts/tags/:tag_id/applications/traffic/hourly",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"internalHosts",
										"tags",
										":tag_id",
										"applications",
										"traffic",
										"hourly"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "tag_id",
											"value": null,
											"description": "Integer - ID of desired alarm"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List Internal Hosts Tag Applications Traffic Raw",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/internalHosts/tags/:tag_id/applications/traffic/raw",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"internalHosts",
										"tags",
										":tag_id",
										"applications",
										"traffic",
										"raw"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "tag_id",
											"value": null,
											"description": "Integer - ID of desired alarm"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Internal Hosts Tag Application",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/internalHosts/tags/:tag_id/applications/:application_id",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"internalHosts",
										"tags",
										":tag_id",
										"applications",
										":application_id"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "tag_id",
											"value": null,
											"description": "Integer - ID of desired alarm"
										},
										{
											"key": "application_id",
											"value": null,
											"description": "Integer - ID of desired application"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Internal Hosts Tag Application Traffic",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/internalHosts/tags/:tag_id/applications/:application_id/traffic",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"internalHosts",
										"tags",
										":tag_id",
										"applications",
										":application_id",
										"traffic"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "tag_id",
											"value": null,
											"description": "Integer - ID of desired alarm"
										},
										{
											"key": "application_id",
											"value": null,
											"description": "Integer - ID of desired application"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Internal Hosts Tag Application Traffic Hourly",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/internalHosts/tags/:tag_id/applications/:application_id/traffic/hourly",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"internalHosts",
										"tags",
										":tag_id",
										"applications",
										":application_id",
										"traffic",
										"hourly"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "tag_id",
											"value": null,
											"description": "Integer - ID of desired alarm"
										},
										{
											"key": "application_id",
											"value": null,
											"description": "Integer - ID of desired application"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Internal Hosts Tag Application Traffic Raw",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/internalHosts/tags/:tag_id/applications/:application_id/traffic/raw",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"internalHosts",
										"tags",
										":tag_id",
										"applications",
										":application_id",
										"traffic",
										"raw"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "tag_id",
											"value": null,
											"description": "Integer - ID of desired alarm"
										},
										{
											"key": "application_id",
											"value": null,
											"description": "Integer - ID of desired application"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Internal Hosts Tag Tree",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/internalHosts/tags/tree",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"internalHosts",
										"tags",
										"tree"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List Internal Hosts Alarms",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/internalHosts/alarms",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"internalHosts",
										"alarms"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Internal Hosts Alarm",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/internalHosts/alarms/:alarm_id",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"internalHosts",
										"alarms",
										":alarm_id"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null
										},
										{
											"key": "alarm_id",
											"value": null,
											"description": "Integer - ID of desired alarm"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Internal Hosts Alarm Trend",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/internalHosts/alarms/:alarm_id/trend",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"internalHosts",
										"alarms",
										":alarm_id",
										"trend"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null
										},
										{
											"key": "alarm_id",
											"value": null,
											"description": "Integer - ID of desired alarm"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Internal Hosts Alarm Trend Daily",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/internalHosts/alarms/:alarm_id/trend/daily",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"internalHosts",
										"alarms",
										":alarm_id",
										"trend",
										"daily"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "alarm_id",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Internal Hosts Alarms Top Hosts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/internalHosts/alarms/topHosts",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"internalHosts",
										"alarms",
										"topHosts"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Internal Hosts Traffic",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/internalHosts/traffic",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"internalHosts",
										"traffic"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Internal Hosts Traffic Hourly",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/internalHosts/traffic/hourly",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"internalHosts",
										"traffic",
										"hourly"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Internal Hosts Traffic Hourly Raw",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": ""
									}
								],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/internalHosts/traffic/raw",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"internalHosts",
										"traffic",
										"raw"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "NetOps",
					"item": [
						{
							"name": "Get NetOps Exporters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
											"if (xsrf != \"\"){",
											"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"interfaceList\": [\n        {\n            \"swaId\": 129,\n            \"exporterIpAddress\": \"10.100.100.7\",\n            \"id\": 1\n        },\n        {\n            \"swaId\": 12,\n            \"exporterIpAddress\": \"10.100.100.7\",\n            \"id\": 2\n        }\n    ],\n    \"date\": \"2015-05-23\",\n    \"direction\": \"INBOUND\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{hostname}}/sw-reporting/v1/tenants/:tenant_id/netops/interface-status",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"sw-reporting",
										"v1",
										"tenants",
										":tenant_id",
										"netops",
										"interface-status"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Fetch All Exporters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
											"if (xsrf != \"\"){",
											"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {},
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{hostname}}/sw-reporting/v1/tenants/:tenant_id/netops/exporters/details/:is_details_required",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"sw-reporting",
										"v1",
										"tenants",
										":tenant_id",
										"netops",
										"exporters",
										"details",
										":is_details_required"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "is_details_required",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Fetch All Interfaces",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
											"if (xsrf != \"\"){",
											"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {},
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{hostname}}/sw-reporting/v1/tenants/:tenant_id/netops/interfaces",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"sw-reporting",
										"v1",
										"tenants",
										":tenant_id",
										"netops",
										"interfaces"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Security Events",
					"item": [
						{
							"name": "Get Security Event Details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
											"if (xsrf != \"\"){",
											"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"details\": [\n        {\n            \"key\": \"baseline\",\n            \"value\": \"100\"\n        },\n        {\n            \"key\": \"tolerance\",\n            \"value\": \"100\"\n        },\n        {\n            \"key\": \"threshold\",\n            \"value\": \"200\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{hostname}}/sw-reporting/v1/tenants/:tenant_id/security-events/templates/:template_id",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"sw-reporting",
										"v1",
										"tenants",
										":tenant_id",
										"security-events",
										"templates",
										":template_id"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "template_id",
											"value": null,
											"description": "Integer - Specific security event ID being requested. Retrieved from /templates."
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List Security Event Templates",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
											"if (xsrf != \"\"){",
											"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"details\": [\n        {\n            \"key\": \"baseline\",\n            \"value\": \"100\"\n        },\n        {\n            \"key\": \"tolerance\",\n            \"value\": \"100\"\n        },\n        {\n            \"key\": \"threshold\",\n            \"value\": \"200\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{hostname}}/sw-reporting/v1/tenants/:tenant_id/security-events/templates",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"sw-reporting",
										"v1",
										"tenants",
										":tenant_id",
										"security-events",
										"templates"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Security Event Query",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
											"if (xsrf != \"\"){",
											"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"hosts\": [\n        {\n            \"ipAddress\": \"10.0.1.56\",\n            \"type\": \"source\"\n        },\n        {\n            \"ipAddress\": \"10.0.2.45\",\n            \"type\": \"target\"\n        }\n    ],\n    \"securityEventTypeIds\": [\n        30,\n        31\n    ],\n    \"timeRange\": {\n        \"from\": \"2017-03-17T17:54:41Z\",\n        \"to\": \"2017-03-21T17:54:41Z\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{hostname}}/sw-reporting/v1/tenants/:tenant_id/security-events/queries",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"sw-reporting",
										"v1",
										"tenants",
										":tenant_id",
										"security-events",
										"queries"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Security Event Query Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
											"if (xsrf != \"\"){",
											"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {},
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"details\": [\n        {\n            \"key\": \"baseline\",\n            \"value\": \"100\"\n        },\n        {\n            \"key\": \"tolerance\",\n            \"value\": \"100\"\n        },\n        {\n            \"key\": \"threshold\",\n            \"value\": \"200\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{hostname}}/sw-reporting/v1/tenants/:tenant_id/security-events/queries/:query_id",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"sw-reporting",
										"v1",
										"tenants",
										":tenant_id",
										"security-events",
										"queries",
										":query_id"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "query_id",
											"value": null,
											"description": "Integer - Specific security event query job ID received from a /queries or /top request."
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Security Event Query Results",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
											"if (xsrf != \"\"){",
											"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {},
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"details\": [\n        {\n            \"key\": \"baseline\",\n            \"value\": \"100\"\n        },\n        {\n            \"key\": \"tolerance\",\n            \"value\": \"100\"\n        },\n        {\n            \"key\": \"threshold\",\n            \"value\": \"200\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{hostname}}/sw-reporting/v1/tenants/:tenant_id/security-events/results/:query_id",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"sw-reporting",
										"v1",
										"tenants",
										":tenant_id",
										"security-events",
										"results",
										":query_id"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "query_id",
											"value": null,
											"description": "Integer - Specific security event query job ID received from a /queries or /top request."
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Fetch All Interfaces",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
											"if (xsrf != \"\"){",
											"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {},
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{hostname}}/sw-reporting/v1/tenants/:tenant_id/netops/interfaces",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"sw-reporting",
										"v1",
										"tenants",
										":tenant_id",
										"netops",
										"interfaces"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "NVM Flows",
					"item": [
						{
							"name": "Create NVM Flow Query",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
											"if (xsrf != \"\"){",
											"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"details\": [\n        {\n            \"key\": \"baseline\",\n            \"value\": \"100\"\n        },\n        {\n            \"key\": \"tolerance\",\n            \"value\": \"100\"\n        },\n        {\n            \"key\": \"threshold\",\n            \"value\": \"200\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{hostname}}/sw-reporting/v1/tenants/:tenant_id/nvm-flows/queries",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"sw-reporting",
										"v1",
										"tenants",
										":tenant_id",
										"nvm-flows",
										"queries"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get NVM Flow Query Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
											"if (xsrf != \"\"){",
											"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {},
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"details\": [\n        {\n            \"key\": \"baseline\",\n            \"value\": \"100\"\n        },\n        {\n            \"key\": \"tolerance\",\n            \"value\": \"100\"\n        },\n        {\n            \"key\": \"threshold\",\n            \"value\": \"200\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{hostname}}/sw-reporting/v1/tenants/:tenant_id/nvm-flows/queries/:job_id",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"sw-reporting",
										"v1",
										"tenants",
										":tenant_id",
										"nvm-flows",
										"queries",
										":job_id"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "job_id",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Security Event Query Results",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
											"if (xsrf != \"\"){",
											"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {},
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"details\": [\n        {\n            \"key\": \"baseline\",\n            \"value\": \"100\"\n        },\n        {\n            \"key\": \"tolerance\",\n            \"value\": \"100\"\n        },\n        {\n            \"key\": \"threshold\",\n            \"value\": \"200\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{hostname}}/sw-reporting/v1/tenants/:tenant_id/nvm-flows/queries/:job_id/results",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"sw-reporting",
										"v1",
										"tenants",
										":tenant_id",
										"nvm-flows",
										"queries",
										":job_id",
										"results"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "job_id",
											"value": null
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Traffic by Tag",
					"item": [
						{
							"name": "Create Traffic by Tag Query",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
											"if (xsrf != \"\"){",
											"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"startDate\": \"2017-09-21T03:20:33Z\",\n    \"endDate\": \"2017-09-21T15:20:33Z\",\n    \"tagLimit\": 10,\n    \"rootTagIds\": [\n        1,\n        0\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{hostname}}/sw-reporting/v1/tenants/:tenant_id/tags/:tag_id/traffic/queries",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"sw-reporting",
										"v1",
										"tenants",
										":tenant_id",
										"tags",
										":tag_id",
										"traffic",
										"queries"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "tag_id",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Traffic by Tag Query Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
											"if (xsrf != \"\"){",
											"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {},
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{hostname}}/sw-reporting/v1/tenants/:tenant_id/tags/:tag_id/traffic/queries/:query_id",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"sw-reporting",
										"v1",
										"tenants",
										":tenant_id",
										"tags",
										":tag_id",
										"traffic",
										"queries",
										":query_id"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "tag_id",
											"value": null
										},
										{
											"key": "query_id",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Traffic by Tag Query Results",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
											"if (xsrf != \"\"){",
											"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {},
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{hostname}}/sw-reporting/v1/tenants/:tenant_id/tags/:tag_id/traffic/results/:query_id",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"sw-reporting",
										"v1",
										"tenants",
										":tenant_id",
										"tags",
										":tag_id",
										"traffic",
										"results",
										":query_id"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "tag_id",
											"value": null
										},
										{
											"key": "query_id",
											"value": null
										}
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.sendRequest({",
							"      url:  \"https://\" + pm.collectionVariables.get(\"hostname\")+\"/token/v2/authenticate\", ",
							"      method: 'POST',",
							"      header: {",
							"        'Accept': 'application/json',",
							"        'Content-Type': 'application/x-www-form-urlencoded'",
							"      },",
							"      body: {",
							"          mode: 'urlencoded',",
							"          urlencoded: [",
							"            {key: \"username\", value: pm.collectionVariables.get(\"username\"), disabled: false},",
							"            {key: \"password\", value: pm.collectionVariables.get(\"password\"), disabled: false},",
							"        ]",
							"      }",
							"  }, function (err, res) {",
							"        pm.cookies.add(res.cookies.get('stealthwatch.jwt'))",
							"        pm.collectionVariables.set(\"x_xsrf_token\", pm.cookies.get('XSRF-TOKEN'))",
							"  });"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Reporting v2",
			"item": [
				{
					"name": "Login",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{hostname}}/token/v2/authenticate",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"token",
								"v2",
								"authenticate"
							]
						},
						"description": "Authenticate"
					},
					"response": []
				},
				{
					"name": "Logout",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{hostname}}/token",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"token"
							]
						},
						"description": "Authenticate"
					},
					"response": []
				},
				{
					"name": "Create Flow Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"sna_query_id\", jsonData.data.query.id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var hoursBack = 24;",
									"",
									"var endTime = new Date();",
									"var startTime = new Date();",
									"startTime.setHours(endTime.getHours() - hoursBack);",
									"",
									"var endTimestamp = endTime.getUTCFullYear() + \"-\" + (\"0\" + (endTime.getUTCMonth() + 1)).slice(-2) + \"-\" + (\"0\" + (endTime.getUTCDate())).slice(-2) + \"T\" + (\"0\" + (endTime.getUTCHours())).slice(-2) + \":\" + (\"0\" + (endTime.getUTCMinutes())).slice(-2) + \":\" + (\"0\" + (endTime.getUTCSeconds())).slice(-2) + \"Z\";",
									"var startTimestamp = startTime.getUTCFullYear() + \"-\" + (\"0\" + (startTime.getUTCMonth() + 1)).slice(-2) + \"-\" + (\"0\" + (startTime.getUTCDate())).slice(-2) + \"T\" + (\"0\" + (startTime.getUTCHours())).slice(-2) + \":\" + (\"0\" + (startTime.getUTCMinutes())).slice(-2) + \":\" + (\"0\" + (startTime.getUTCSeconds())).slice(-2) + \"Z\";",
									"",
									"postman.setEnvironmentVariable(\"sna_end_timestamp\", endTimestamp);",
									"postman.setEnvironmentVariable(\"sna_start_timestamp\", startTimestamp);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": ""
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"searchName\": \"Flows API Search on 3/1/2017 at 12:36 PM\",\n  \"startDateTime\": \"2017-03-10T08:00:00Z\",\n  \"endDateTime\": \"2017-03-10T08:05:00Z\",\n  \"recordLimit\": 500,\n  \"subject\": {\n    \"orientation\": \"CLIENT\",\n    \"ipAddresses\": {\n      \"includes\": [\"192.168.0\", \"10.20\"],\n      \"excludes\": [\"10.20.20\", \"192.168.0.1-100\"]\n    },\n    \"hostGroups\": {\n      \"includes\": [1234, 2345],\n      \"excludes\": [12345, 23456]\n    },\n    \"tcpUdpPorts\": {\n      \"includes\": [\"80-9000/tcp\", \"67-68/udp\"],\n      \"excludes\": [\"8000-9000/tcp\", \"68/udp\"]\n    },\n    \"username\": {\n      \"includes\": [\"admin\", \"veep\"],\n      \"excludes\": [\"jdub\", \"ghill\"]\n    },\n    \"byteCount\": [{\n      \"operator\": \">=\",\n      \"value\": [204800]\n    }],\n    \"packetCount\": [{\n      \"operator\": \"BETWEEN\",\n      \"value\": [100, 400]\n    }],\n    \"macAddress\": {\n      \"includes\": [\"00-1B-63-84-45-36\", \"00-1B-63-84-45-63\"],\n      \"excludes\": [\"00-14-22-01-23-45\", \"00-14-22-01-23-54\"]\n    },\n    \"processName\": {\n      \"includes\": [\"cmd.exe\", \"telnet.exe\"],\n      \"excludes\": [\"ping.exe\", \"proc.bin\"]\n    },\n    \"processHash\": {\n      \"includes\": [\"cf23df2207d99a74fbe169e3eba035e633b65d94\"],\n      \"excludes\": [\"cf23df2207d99a74fbe169e3eba035e633b65d97\"]\n    },\n    \"trustSecId\": {\n      \"includes\": [32, 44],\n      \"excludes\": [75]\n    },\n    \"trustSecName\": {\n      \"includes\": [\"CTS-One\"],\n      \"excludes\": [\"CTS-Two\", \"CTS-Three\"]\n    }\n  },\n  \"peer\": {\n    \"ipAddresses\": {\n      \"includes\": [\"2001:0db8:85a3:0000:0000:8a2e:0370:7334\", \"2001:DB8:0:56::/64\"],\n      \"excludes\": [\"2001:DB80:0:56::ABCD:239.18.52.86\", \"2001:DB8:0:56:ABCD:EF12:3456:1–10\"]\n    },\n    \"hostGroups\": {\n      \"includes\": [9876, 8765],\n      \"excludes\": [987654, 87654]\n    },\n    \"tcpUdpPorts\": {\n      \"includes\": [\"80-9000/tcp\", \"67-68/udp\"],\n      \"excludes\": [\"8000-9000/tcp\", \"68/udp\"]\n    },\n    \"username\": {\n      \"includes\": [\"admin\", \"veep\"],\n      \"excludes\": [\"jdub\", \"ghill\"]\n    },\n    \"byteCount\": [{\n      \"operator\": \">=\",\n      \"value\": [204800]\n    }],\n    \"packetCount\": [{\n      \"operator\": \"BETWEEN\",\n      \"value\": [100, 400]\n    }],\n    \"macAddress\": {\n      \"includes\": [\"00-1B-63-84-45-36\", \"00-1B-63-84-45-63\"],\n      \"excludes\": [\"00-14-22-01-23-45\", \"00-14-22-01-23-54\"]\n    },\n    \"processName\": {\n      \"includes\": [\"cmd.exe\", \"telnet.exe\"],\n      \"excludes\": [\"ping.exe\", \"proc.bin\"]\n    },\n    \"processHash\": {\n      \"includes\": [\"cf23df2207d99a74fbe169e3eba035e633b65d94\"],\n      \"excludes\": [\"cf23df2207d99a74fbe169e3eba035e633b65d97\"]\n    },\n    \"trustSecId\": {\n      \"includes\": [32, 44],\n      \"excludes\": [75]\n    },\n    \"trustSecName\": {\n      \"includes\": [\"CTS-One\"],\n      \"excludes\": [\"CTS-Two\", \"CTS-Three\"]\n    } \n  },\n  \"flow\": {\n    \"tcpUdpPorts\": {\n      \"includes\": [\"80-9000/tcp\", \"67-68/udp\"],\n      \"excludes\": [\"8000-9000/tcp\", \"68/udp\"]\n    },\n    \"applications\": {\n      \"includes\": [3002, 3001, 116, 136],\n      \"excludes\": [127, 125, 147, 45]\n    },\n    \"flowDirection\": \"BIDIRECTIONAL\",\n    \"byteCount\": [{\n        \"operator\": \">=\",\n        \"value\": [204800]\n      }],\n    \"packetCount\": [{\n      \"operator\": \"<=\",\n      \"value\": [10]\n    }],\n    \"payload\": {\n      \"includes\": [\"http\", \"blah\"],\n      \"excludes\": []\n    },\n    \"tcpConnections\": [{\n        \"operator\": \">=\",\n        \"value\": [2000]\n      }],\n    \"tcpRetransmissions\": [{\n        \"operator\": \">=\",\n        \"value\": [2000]\n      }],\n    \"tlsVersion\": [\"TLS 1.2\", \"UNKNOWN\"],\n    \"cipherSuite\": {\n      \"messageAuthCode\": [\"SHA256\"],\n      \"keyExchange\": [\"ECDHE\"],\n      \"authAlgorithm\": [\"RSA\"],\n      \"encAlgorithm\": [\"AES_128_CBC\"],\n      \"keyLength\": [\"128\"]\n\n    },\n    \"averageRoundTripTime\": [{\n        \"operator\": \"<=\",\n        \"value\": [50]\n      }],\n    \"averageServerResponseTime\": [{\n        \"operator\": \">=\",\n        \"value\": [2000]\n      }],\n    \"flowDataSource\": [{\n      \"flowCollectorId\": 151,\n      \"exporters\": [{\n        \"ipAddress\": \"10.100.100.7\",\n        \"interfaceIds\": [7,27]\n      },{\n        \"ipAddress\": \"10.203.1.1\"\n      }]\n    }],\n    \"protocol\": [114, 10],\n    \"includeInterfaceData\": false,\n    \"flowAction\": \"permitted\"\n  }\n}"
						},
						"url": {
							"raw": "https://{{hostname}}/sw-reporting/v2/tenants/:tenant_id/flows/queries",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"sw-reporting",
								"v2",
								"tenants",
								":tenant_id",
								"flows",
								"queries"
							],
							"query": [
								{
									"key": "startDateTime",
									"value": null,
									"description": "Start Time in UTC for flow search\n\n    Format: yyyy-MM-dd'T'HH:mm:ss'Z'\n    Required field\n    Must not occur after endDateTime",
									"disabled": true
								},
								{
									"key": "endDateTime",
									"value": null,
									"description": "End Time in UTC for flow search\n\n    Format: yyyy-MM-dd'T'HH:mm:ss'Z'\n    Required field\n    Must not occur before startDateTime",
									"disabled": true
								},
								{
									"key": "searchName",
									"value": null,
									"description": "Name for the search\n\n    Default: \"Flows API Search on 'M-d-yyyy at h:mm:ss a'\"\n    Maximum length: 256 characters",
									"disabled": true
								},
								{
									"key": "recordLimit",
									"value": null,
									"description": "Maximum number of flow records to return\n\n    Default: 1000\n    Minimum: 1\n    Maximum: 10,000\n    Specifying large values here may cause performance problems. It is suggested that queries are built to target specific flows so that this risk is mitigated.\n    Values outside of the allowed range will be adjusted accordingly:\n        Values less than 1 will be changed to 1 for the current query.\n        Values greater than 10,000 will be changed to 10,000 for the current query.",
									"disabled": true
								},
								{
									"key": "subject",
									"value": null,
									"description": "Collection of Subject Host filters\n\n    orientation: If included, determines whether hosts detected as client or server are assigned the subject role (if not provided, defaults to either)\n        Valid values: server, client, either\n    ipAddresses: IP Addresses to include/exclude\n        Validation rules: See SMC on-line help\n    hostGroups: Host Group IDs to include/exclude\n    tcpUdpPorts: Protocols/Ports to include/exclude\n    username: Usernames to include/exclude\n    byteCount: List of byte ranges with which to filter\n        operator: Comparator to use during query\n            Valid values: >, <, >=, <=, BETWEEN\n        value: Either one or two integers representing the value(s) to be compared\n    packetCount: List of packet ranges with which to filter\n        operator: Comparator to use during query\n            Valid values: >, <, >=, <=, BETWEEN\n        value: Either one or two integers representing the value(s) to be compared\n    macAddress: MAC addresses to include/exclude\n    processName: Process names to include/exclude\n    processHash: Process hash values to include/exclude\n    trustSecId: Cisco Trust Sec IDs to include/exclude\n    trustSecName: Cisco Trust Sec Names to include/exclude",
									"disabled": true
								},
								{
									"key": "peer",
									"value": null,
									"description": "Collection of Peer Host filters\n\n    ipAddresses: IP Addresses to include/exclude\n        Validation rules: See SMC on-line help\n    hostGroups: Host Group IDs to include/exclude\n    tcpUdpPorts: Protocols/Ports to include/exclude\n    username: Usernames to include/exclude\n    byteCount: List of byte ranges with which to filter\n        operator: Comparator to use during query\n            Valid values: >, <, >=, <=, BETWEEN\n        value: Either one or two integers representing the value(s) to be compared\n    packetCount: List of packet ranges with which to filter\n        operator: Comparator to use during query\n            Valid values: >, <, >=, <=, BETWEEN\n        value: Either one or two integers representing the value(s) to be compared\n    macAddress: MAC addresses to include/exclude\n    processName: Process names to include/exclude\n    processHash: Process hash values to include/exclude\n    trustSecId: Cisco Trust Sec IDs to include/exclude\n    trustSecName: Cisco Trust Sec Names to include/exclude",
									"disabled": true
								},
								{
									"key": "flow",
									"value": null,
									"description": "Collection of Flow metadata filters\n\n    tcpUdpPorts: TCP/UDP ports to include/exclude\n        Formatting: <Port #/Range>/<TCP/UDP>\n        Examples: \"8080/tcp\", \"20-21/UDP\"\n    applications: Application IDs to include/exclude\n    flowDirection: Indicates directionality of the flow.\n        Valid values: \"BOTH\", \"UNIDIRECTIONAL\", \"BIDIRECTIONAL\"\n    byteCount: List of byte ranges with which to filter\n        operator: Comparator to use during query\n            Valid values: >, <, >=, <=, BETWEEN\n        value: Either one or two integers representing the value(s) to be compared\n    packetCount: List of packet ranges with which to filter\n        operator: Comparator to use during query\n            Valid values: >, <, >=, <=, BETWEEN\n        value: Either one or two integers representing the value(s) to be compared\n    payload: List of payload data (in ASCII format) to include/exclude\n    tcpConnections: The number of TCP connections that occur during the flow.\n        operator: Comparator to use during query\n            Valid values: >, <, >=, <=, BETWEEN\n        value: Either one or two integers representing the value(s) to be compared\n    tcpRetransmissions: The number of TCP packets that were retransmitted during the flow.\n        operator: Comparator to use during query\n            Valid values: >, <, >=, <=, BETWEEN\n        value: Either one or two integers representing the value(s) to be compared\n    averageRoundTripTime: The Average Round-Trip Time, or the average amount of time (in milliseconds) required for all the TCP connections to occur in the flow.\n        operator: Comparator to use during query\n            Valid values: >, <, >=, <=, BETWEEN\n        value: Either one or two integers representing the value(s) to be compared\n    averageServerResponseTime: The Average Server Response Time, or the average amount of time (in milliseconds) between the first request and response for all the TCP connections in the flow.\n        operator: Comparator to use during query\n            Valid values: >, <, >=, <=, BETWEEN\n        value: Either one or two integers representing the value(s) to be compared\n    protocol: The list of protocol IDs as assigned by IANA with which to filter\n    includeInterfaceData: The flag to include the interface data\n    flowDataSource: The list of Flow Collectors/Exporter/Interfaces\n        flowCollectorId: Flow Collector ID\n        exporters: Flow Collector Exporters (if not provided, defaults to all)\n            ipAddress: Exporter IP Address\n            interfaceIds: List of Exporter's Interface IDs (if not provided, defaults to all)\n    flowAction: The interfaces flow action\n        Valid values: permitted, denied, permitted_denied\n    tlsVersion: List of TLS version\n        Valid values: \"TLS 1.3\",\"TLS 1.2\",\"TLS 1.1\",\"TLS 1.0\",\"SSL 3.0\",\"SSL 2.0\",\"SSL 1.0\",\"UNKNOWN\",\"NONE\"\n    cipherSuite: The set of cryptographic algorithms being used\n        messageAuthCode: List of message authentication code (MAC) algorithms being used\n            Examples:: \"GOST28147\", \"GOSTR3411\", \"MD5\", \"NULL\", \"SHA\", \"SHA256\", \"SHA384\"\n        keyExchange: List of key exchange algorithms being used\n            Examples:: \"DH\", \"DHE\", \"ECDH\", \"ECDHE\", \"FORTEZZA\", \"KRB5\", \"KRB5_EXPORT\", \"NULL\", \"PCT\", \"PCT1_MAC_BITS 128\", \"PSK\", \"RSA\", \"RSA_EXPORT 1024\", \"RSA_EXPORT\", \"RSA_FIPS\", \"SRP\", \"VKO GOST R 34.10-2001\", \"VKO GOST R 34.10-94\"\n        authAlgorithm: List of authorization algorithms being used\n            Examples:: \"Anon\", \"DHE\", \"DSS\", \"ECDSA\", \"KEA\", \"KRB5\", \"KRB5_EXPORT\", \"NULL\", \"PCT\", \"PSK\", \"RSA\", \"RSA_EXPORT 1024\", \"RSA_EXPORT\", \"RSA_FIPS\", \"SHA\", \"VKO GOST R 34.10-2001\", \"VKO GOST R 34.10-94\"\n        encAlgorithm: List of encryption algorithms being used\n            Examples:: \"3DES_EDE_CBC\", \"AES_128_CBC\", \"AES_128_CCM\", \"AES_128_CCM_8\", \"AES_128_GCM\", \"AES_256_CBC\", \"AES_256_CCM\", \"AES_256_CCM_8\", \"AES_256_GCM\", \"ARIA_128_CBC\", \"ARIA_128_GCM\", \"ARIA_256_CBC\", \"ARIA_256_GCM\", \"CAMELLIA_128_CBC\", \"CAMELLIA_128_GCM\", \"CAMELLIA_256_CBC\", \"CAMELLIA_256_GCM\", \"CHACHA20_POLY1305\", \"DES40_CBC\", \"DES_192_EDE3_CBC\", \"DES_64_CBC\", \"DES_CBC\", \"DES_CBC_40\", \"FORTEZZA_CBC\", \"GOST28147\", \"IDEA_128_CBC\", \"IDEA_CBC\", \"NULL\", \"RC2_CBC_128_CBC\", \"RC2_CBC_40\", \"RC2_CBC_56\", \"RC4_128\", \"RC4_128_EXPORT40\", \"RC4_40\", \"RC4_56\", \"RC4_64\", \"SEED_CBC\"\n        keyLength: List of key length in bits being used\n            Examples:: \"0\", \"40\", \"56\", \"64\", \"80\", \"128\", \"168\", \"192\", \"256\"",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "tenant_id",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Flow Query Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": ""
							}
						],
						"url": {
							"raw": "https://{{hostname}}/sw-reporting/v2/tenants/:tenant_id/flows/queries/:query_id",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"sw-reporting",
								"v2",
								"tenants",
								":tenant_id",
								"flows",
								"queries",
								":query_id"
							],
							"variable": [
								{
									"key": "tenant_id",
									"value": null
								},
								{
									"key": "query_id",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Flow Query Results",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": ""
							}
						],
						"url": {
							"raw": "https://{{hostname}}/sw-reporting/v2/tenants/:tenant_id/flows/queries/:query_id/results",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"sw-reporting",
								"v2",
								"tenants",
								":tenant_id",
								"flows",
								"queries",
								":query_id",
								"results"
							],
							"variable": [
								{
									"key": "tenant_id",
									"value": null
								},
								{
									"key": "query_id",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List Incidents",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"sna_query_id\", jsonData.data.searchJob.id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var hoursBack = 24;",
									"",
									"var endTime = new Date();",
									"var startTime = new Date();",
									"startTime.setHours(endTime.getHours() - hoursBack);",
									"",
									"var endTimestamp = endTime.getUTCFullYear() + \"-\" + (\"0\" + (endTime.getUTCMonth() + 1)).slice(-2) + \"-\" + (\"0\" + (endTime.getUTCDate())).slice(-2) + \"T\" + (\"0\" + (endTime.getUTCHours())).slice(-2) + \":\" + (\"0\" + (endTime.getUTCMinutes())).slice(-2) + \":\" + (\"0\" + (endTime.getUTCSeconds())).slice(-2) + \"Z\";",
									"var startTimestamp = startTime.getUTCFullYear() + \"-\" + (\"0\" + (startTime.getUTCMonth() + 1)).slice(-2) + \"-\" + (\"0\" + (startTime.getUTCDate())).slice(-2) + \"T\" + (\"0\" + (startTime.getUTCHours())).slice(-2) + \":\" + (\"0\" + (startTime.getUTCMinutes())).slice(-2) + \":\" + (\"0\" + (startTime.getUTCSeconds())).slice(-2) + \"Z\";",
									"",
									"postman.setEnvironmentVariable(\"sna_end_timestamp\", endTimestamp);",
									"postman.setEnvironmentVariable(\"sna_start_timestamp\", startTimestamp);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": ""
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{hostname}}/sw-reporting/v2/tenants/:tenant_id/incidents",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"sw-reporting",
								"v2",
								"tenants",
								":tenant_id",
								"incidents"
							],
							"variable": [
								{
									"key": "tenant_id",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Incident",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"sna_query_id\", jsonData.data.searchJob.id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var hoursBack = 24;",
									"",
									"var endTime = new Date();",
									"var startTime = new Date();",
									"startTime.setHours(endTime.getHours() - hoursBack);",
									"",
									"var endTimestamp = endTime.getUTCFullYear() + \"-\" + (\"0\" + (endTime.getUTCMonth() + 1)).slice(-2) + \"-\" + (\"0\" + (endTime.getUTCDate())).slice(-2) + \"T\" + (\"0\" + (endTime.getUTCHours())).slice(-2) + \":\" + (\"0\" + (endTime.getUTCMinutes())).slice(-2) + \":\" + (\"0\" + (endTime.getUTCSeconds())).slice(-2) + \"Z\";",
									"var startTimestamp = startTime.getUTCFullYear() + \"-\" + (\"0\" + (startTime.getUTCMonth() + 1)).slice(-2) + \"-\" + (\"0\" + (startTime.getUTCDate())).slice(-2) + \"T\" + (\"0\" + (startTime.getUTCHours())).slice(-2) + \":\" + (\"0\" + (startTime.getUTCMinutes())).slice(-2) + \":\" + (\"0\" + (startTime.getUTCSeconds())).slice(-2) + \"Z\";",
									"",
									"postman.setEnvironmentVariable(\"sna_end_timestamp\", endTimestamp);",
									"postman.setEnvironmentVariable(\"sna_start_timestamp\", startTimestamp);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": ""
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{hostname}}/sw-reporting/v2/tenants/:tenant_id/incidents/:incident_origin_id",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"sw-reporting",
								"v2",
								"tenants",
								":tenant_id",
								"incidents",
								":incident_origin_id"
							],
							"variable": [
								{
									"key": "tenant_id",
									"value": null
								},
								{
									"key": "incident_origin_id",
									"value": null
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Config",
			"item": [
				{
					"name": "Docs",
					"item": [
						{
							"name": "Get v1 API Docs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
											"if (xsrf != \"\"){",
											"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/docs",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"docs"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Policy System",
					"item": [
						{
							"name": "Get Default Settings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
											"if (xsrf != \"\"){",
											"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/policy/system/default-settings",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"policy",
										"system",
										"default-settings"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Policy",
					"item": [
						{
							"name": "Custom Events",
							"item": [
								{
									"name": "Create Custom Events",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
													"if (xsrf != \"\"){",
													"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Test\",\n    \"description\": \"Testing Create\",\n    \"subject\": {\n        \"ipAddresses\": {\n            \"includes\": [\n                \"10.0.0.1\",\n                \"10.0.0.2\"\n            ],\n            \"excludes\": []\n        },\n        \"tags\": {\n            \"includes\": [\n                1\n            ],\n            \"excludes\": [\n                10\n            ]\n        },\n        \"users\": {\n            \"includes\": [\n                \"John\",\n                \"Jane\"\n            ],\n            \"excludes\": []\n        },\n        \"devices\": {\n            \"includes\": [\n                \"01:23:45:67:89:ab\",\n                \"01:23:45:67:89:af\"\n            ],\n            \"excludes\": []\n        },\n        \"portProtocols\": {\n            \"includes\": [\n                \"80/TCP\",\n                \"443/TCP\"\n            ],\n            \"excludes\": []\n        },\n        \"trustSecIds\": {\n            \"includes\": [\n                \"1\",\n                \"2\",\n                \"3\"\n            ],\n            \"excludes\": []\n        },\n        \"trustSecNames\": {\n            \"includes\": [\n                \"guest\"\n            ],\n            \"excludes\": []\n        },\n        \"applications\": {\n            \"includes\": [\n                \"1001\",\n                \"2000\",\n                \"3001\"\n            ],\n            \"excludes\": []\n        },\n        \"fileHashs\": {\n            \"includes\": [\n                \"cf23df2207d99a74fbe169e3eba035e633b65d94\"\n            ],\n            \"excludes\": []\n        },\n        \"processNames\": {\n            \"includes\": [\n                \"chrome.exe\"\n            ],\n            \"excludes\": []\n        },\n        \"bytes\": {\n            \"value\": 1024,\n            \"operator\": \"EQUAL\"\n        },\n        \"packets\": {\n            \"value\": 5000,\n            \"operator\": \"LESS-THAN-OR-EQUAL\"\n        },\n        \"byteRatio\": {\n            \"value\": 10.24,\n            \"operator\": \"GREATER-THAN-OR-EQUAL\"\n        },\n        \"orientation\": \"either\"\n    },\n    \"peer\": {\n        \"ipAddresses\": {\n            \"includes\": [],\n            \"excludes\": [\n                \"10.0.0.1\"\n            ]\n        },\n        \"tags\": {\n            \"includes\": [\n                45\n            ],\n            \"excludes\": [\n                3\n            ]\n        },\n        \"users\": {\n            \"includes\": [],\n            \"excludes\": [\n                \"Bob\"\n            ]\n        },\n        \"devices\": {\n            \"includes\": [],\n            \"excludes\": [\n                \"01-23-45-67-89-fe\"\n            ]\n        },\n        \"portProtocols\": {\n            \"includes\": [],\n            \"excludes\": [\n                \"1039/TCP\"\n            ]\n        },\n        \"trustSecIds\": {\n            \"includes\": [],\n            \"excludes\": [\n                \"5\"\n            ]\n        },\n        \"trustSecNames\": {\n            \"includes\": [],\n            \"excludes\": [\n                \"guest\"\n            ]\n        },\n        \"applications\": {\n            \"includes\": [],\n            \"excludes\": [\n                \"124\"\n            ]\n        },\n        \"fileHashs\": {\n            \"includes\": [],\n            \"excludes\": [\n                \"cf23df2207d99a74fbe169e3eba035e633b65d97\"\n            ]\n        },\n        \"processNames\": {\n            \"includes\": [],\n            \"excludes\": [\n                \"chrome.exe\"\n            ]\n        },\n        \"bytes\": {\n            \"value\": 1024,\n            \"operator\": \"GREATER-THAN-OR-EQUAL\"\n        },\n        \"packets\": {\n            \"value\": 5000,\n            \"operator\": \"GREATER-THAN\"\n        },\n        \"byteRatio\": {\n            \"value\": 10.24,\n            \"operator\": \"GREATER-THAN-OR-EQUAL\"\n        }\n    },\n    \"connection\": {\n        \"totalBytes\": {\n            \"value\": 1024,\n            \"operator\": \"GREATER-THAN\"\n        },\n        \"totalPackets\": {\n            \"value\": 1000,\n            \"operator\": \"GREATER-THAN\"\n        },\n        \"timeOfDay\": [\n            {\n                \"from\": \"10:00Z\",\n                \"to\": \"11:00Z\"\n            },\n            {\n                \"from\": \"14:00Z\",\n                \"to\": \"15:00Z\"\n            }\n        ],\n        \"duration\": {\n            \"value\": 180,\n            \"operator\": \"GREATER-THAN\"\n        },\n        \"serverResponseTime\": {\n            \"value\": 1200,\n            \"operator\": \"LESS-THAN-OR-EQUAL\"\n        },\n        \"roundTripTime\": {\n            \"value\": 200,\n            \"operator\": \"EQUAL\"\n        },\n        \"flowAction\": \"PERMITTED_AND_DENIED\",\n        \"protocols\": {\n            \"includes\": [\n                6,\n                17\n            ],\n            \"excludes\": [\n                1\n            ]\n        },\n        \"services\": {\n            \"includes\": [\n                1,\n                2\n            ],\n            \"excludes\": [\n                3\n            ]\n        },\n        \"encryptedTrafficAnalytics\": {\n            \"tls\": {\n                \"value\": \"TLS 1.1\",\n                \"operator\": \"GREATER-THAN\"\n            }\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/policy/customEvents",
											"protocol": "https",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"smc-configuration",
												"rest",
												"v1",
												"tenants",
												":tenant_id",
												"policy",
												"customEvents"
											],
											"variable": [
												{
													"key": "tenant_id",
													"value": null,
													"description": "Integer - ID of desired tenant"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "List Custom Events",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
													"if (xsrf != \"\"){",
													"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {},
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/policy/customEvents",
											"protocol": "https",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"smc-configuration",
												"rest",
												"v1",
												"tenants",
												":tenant_id",
												"policy",
												"customEvents"
											],
											"query": [
												{
													"key": "ipAddress",
													"value": null,
													"description": "String - The IP address by which the results will be filtered by.",
													"disabled": true
												},
												{
													"key": "tagId",
													"value": null,
													"description": "String - The host group ID by which the results will be filtered by.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "tenant_id",
													"value": null,
													"description": "Integer - ID of desired tenant"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Custom Event",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
													"if (xsrf != \"\"){",
													"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {},
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/policy/customEvents/:custom_event_id",
											"protocol": "https",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"smc-configuration",
												"rest",
												"v1",
												"tenants",
												":tenant_id",
												"policy",
												"customEvents",
												":custom_event_id"
											],
											"variable": [
												{
													"key": "tenant_id",
													"value": null,
													"description": "Integer - ID of desired tenant"
												},
												{
													"key": "custom_event_id",
													"value": null,
													"description": "Integer - The Custom Event Policy ID"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Custom Event",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
													"if (xsrf != \"\"){",
													"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Test Update\",\n    \"description\": \"Testing Update\",\n    \"timestamp\": \"2018-01-30T19:47:00.463+0000\",\n    \"subject\": {\n        \"ipAddresses\": {\n            \"includes\": [\n                \"10.0.0.1\",\n                \"10.0.0.2\"\n            ],\n            \"excludes\": []\n        },\n        \"tags\": {\n            \"includes\": [\n                65535\n            ],\n            \"excludes\": [\n                10\n            ]\n        },\n        \"users\": {\n            \"includes\": [\n                \"John\",\n                \"Jane\"\n            ],\n            \"excludes\": []\n        },\n        \"devices\": {\n            \"includes\": [\n                \"01:23:45:67:89:ab\",\n                \"01:23:45:67:89:af\"\n            ],\n            \"excludes\": []\n        },\n        \"portProtocols\": {\n            \"includes\": [\n                \"80/TCP\",\n                \"443/TCP\"\n            ],\n            \"excludes\": []\n        },\n        \"trustSecIds\": {\n            \"includes\": [\n                \"1\",\n                \"2\",\n                \"3\"\n            ],\n            \"excludes\": []\n        },\n        \"trustSecNames\": {\n            \"includes\": [\n                \"guest\"\n            ],\n            \"excludes\": []\n        },\n        \"applications\": {\n            \"includes\": [\n                \"10\",\n                \"20\",\n                \"30\"\n            ],\n            \"excludes\": []\n        },\n        \"fileHashs\": {\n            \"includes\": [\n                \"cf23df2207d99a74fbe169e3eba035e633b65d94\"\n            ],\n            \"excludes\": []\n        },\n        \"processNames\": {\n            \"includes\": [\n                \"chrome.exe\"\n            ],\n            \"excludes\": []\n        },\n        \"bytes\": {\n            \"value\": 1024,\n            \"operator\": \"EQUAL\"\n        },\n        \"packets\": {\n            \"value\": 5000,\n            \"operator\": \"LESS-THAN-OR-EQUAL\"\n        },\n        \"byteRatio\": {\n            \"value\": 10.24,\n            \"operator\": \"GREATER-THAN-OR-EQUAL\"\n        },\n        \"orientation\": \"either\"\n    },\n    \"peer\": {\n        \"ipAddresses\": {\n            \"includes\": [],\n            \"excludes\": [\n                \"10.0.0.1\"\n            ]\n        },\n        \"tags\": {\n            \"includes\": [\n                45\n            ],\n            \"excludes\": [\n                3\n            ]\n        },\n        \"users\": {\n            \"includes\": [],\n            \"excludes\": [\n                \"Bob\"\n            ]\n        },\n        \"devices\": {\n            \"includes\": [],\n            \"excludes\": [\n                \"01-23-45-67-89-fe\"\n            ]\n        },\n        \"portProtocols\": {\n            \"includes\": [],\n            \"excludes\": [\n                \"65539/TCP\"\n            ]\n        },\n        \"trustSecIds\": {\n            \"includes\": [],\n            \"excludes\": [\n                \"5\"\n            ]\n        },\n        \"trustSecNames\": {\n            \"includes\": [],\n            \"excludes\": [\n                \"guest\"\n            ]\n        },\n        \"applications\": {\n            \"includes\": [],\n            \"excludes\": [\n                \"40\"\n            ]\n        },\n        \"fileHashs\": {\n            \"includes\": [],\n            \"excludes\": [\n                \"cf23df2207d99a74fbe169e3eba035e633b65d97\"\n            ]\n        },\n        \"processNames\": {\n            \"includes\": [],\n            \"excludes\": [\n                \"chrome.exe\"\n            ]\n        },\n        \"bytes\": {\n            \"value\": 1024,\n            \"operator\": \"GREATER-THAN-OR-EQUAL\"\n        },\n        \"packets\": {\n            \"value\": 5000,\n            \"operator\": \"GREATER-THAN\"\n        },\n        \"byteRatio\": {\n            \"value\": 10.24,\n            \"operator\": \"GREATER-THAN-OR-EQUAL\"\n        }\n    },\n    \"connection\": {\n        \"totalBytes\": {\n            \"value\": 1024,\n            \"operator\": \"GREATER-THAN\"\n        },\n        \"totalPackets\": {\n            \"value\": 1000,\n            \"operator\": \"GREATER-THAN\"\n        },\n        \"timeOfDay\": [\n            {\n                \"from\": \"10:00Z\",\n                \"to\": \"11:00Z\"\n            },\n            {\n                \"from\": \"14:00Z\",\n                \"to\": \"15:00Z\"\n            }\n        ],\n        \"duration\": {\n            \"value\": 180,\n            \"operator\": \"GREATER-THAN\"\n        },\n        \"serverResponseTime\": {\n            \"value\": 1200,\n            \"operator\": \"LESS-THAN-OR-EQUAL\"\n        },\n        \"roundTripTime\": {\n            \"value\": 200,\n            \"operator\": \"EQUAL\"\n        },\n        \"flowAction\": \"PERMITTED_AND_DENIED\",\n        \"protocols\": {\n            \"includes\": [\n                6,\n                17\n            ],\n            \"excludes\": [\n                1\n            ]\n        },\n        \"services\": {\n            \"includes\": [\n                1,\n                2\n            ],\n            \"excludes\": [\n                3\n            ]\n        },\n        \"encryptedTrafficAnalytics\": {\n            \"tls\": {\n                \"value\": \"TLS 1.1\",\n                \"operator\": \"GREATER-THAN\"\n            }\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/policy/customEvents/:custom_event_id",
											"protocol": "https",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"smc-configuration",
												"rest",
												"v1",
												"tenants",
												":tenant_id",
												"policy",
												"customEvents",
												":custom_event_id"
											],
											"variable": [
												{
													"key": "tenant_id",
													"value": null,
													"description": "Integer - ID of desired tenant"
												},
												{
													"key": "custom_event_id",
													"value": null,
													"description": "Integer - The Custom Event Policy ID"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Custom Event",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
													"if (xsrf != \"\"){",
													"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/policy/customEvents/:custom_event_id",
											"protocol": "https",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"smc-configuration",
												"rest",
												"v1",
												"tenants",
												":tenant_id",
												"policy",
												"customEvents",
												":custom_event_id"
											],
											"variable": [
												{
													"key": "tenant_id",
													"value": null,
													"description": "Integer - ID of desired tenant"
												},
												{
													"key": "custom_event_id",
													"value": null,
													"description": "Integer - The Custom Event Policy ID"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Enable/Disable Custom Event Policy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
													"if (xsrf != \"\"){",
													"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"timestamp\": \"2018-01-30T19:47:00.463+0000\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/policy/customEvents/:custom_event_id/:action",
											"protocol": "https",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"smc-configuration",
												"rest",
												"v1",
												"tenants",
												":tenant_id",
												"policy",
												"customEvents",
												":custom_event_id",
												":action"
											],
											"variable": [
												{
													"key": "tenant_id",
													"value": null,
													"description": "Integer - ID of desired tenant"
												},
												{
													"key": "custom_event_id",
													"value": null,
													"description": "Integer - The Custom Event Policy ID"
												},
												{
													"key": "action",
													"value": null,
													"description": "String - Required, one of (enable, disable)\nenable: This option enables the custom security event policy\ndisable: This option disables the custom security event policy"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "System",
							"item": [
								{
									"name": "List System Policies",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
													"if (xsrf != \"\"){",
													"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {},
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/policy/system",
											"protocol": "https",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"smc-configuration",
												"rest",
												"v1",
												"tenants",
												":tenant_id",
												"policy",
												"system"
											],
											"variable": [
												{
													"key": "tenant_id",
													"value": null,
													"description": "Integer - ID of desired tenant"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get System Policy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
													"if (xsrf != \"\"){",
													"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {},
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/policy/system/:policy_id",
											"protocol": "https",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"smc-configuration",
												"rest",
												"v1",
												"tenants",
												":tenant_id",
												"policy",
												"system",
												":policy_id"
											],
											"variable": [
												{
													"key": "tenant_id",
													"value": null,
													"description": "Integer - ID of desired tenant"
												},
												{
													"key": "policy_id",
													"value": null,
													"description": "Integer - A single policy ID."
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get System Policy Events",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
													"if (xsrf != \"\"){",
													"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {},
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/policy/system/events",
											"protocol": "https",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"smc-configuration",
												"rest",
												"v1",
												"tenants",
												":tenant_id",
												"policy",
												"system",
												"events"
											],
											"query": [
												{
													"key": "tagId",
													"value": null,
													"description": "A single tag Id used to filter the results for policies that explicitly include the tag.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "tenant_id",
													"value": null,
													"description": "Integer - ID of desired tenant"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get System Policy Events By IP",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
													"if (xsrf != \"\"){",
													"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {},
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/policy/system/events/:ip_address",
											"protocol": "https",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"smc-configuration",
												"rest",
												"v1",
												"tenants",
												":tenant_id",
												"policy",
												"system",
												"events",
												":ip_address"
											],
											"query": [
												{
													"key": "tagId",
													"value": null,
													"description": "A single tag Id used to filter the results for policies that explicitly include the tag.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "tenant_id",
													"value": null,
													"description": "Integer - ID of desired tenant"
												},
												{
													"key": "ip_address",
													"value": null
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update System Policy Events",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
													"if (xsrf != \"\"){",
													"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"id\": 276,\n        \"policyId\": 2,\n        \"eventSettings\": {\n            \"eventStatus\": {\n                \"sourceStatus\": \"ENABLED\",\n                \"targetStatus\": \"ENABLED\"\n            },\n            \"alarmSettings\": []\n        }\n    },\n    {\n        \"id\": 276,\n        \"policyId\": 8,\n        \"eventSettings\": {\n            \"eventStatus\": {\n                \"sourceStatus\": \"DISABLED\",\n                \"targetStatus\": \"DISABLED\"\n            },\n            \"alarmSettings\": []\n        }\n    },\n    {\n        \"id\": 32,\n        \"policyId\": 8,\n        \"eventSettings\": {\n            \"eventStatus\": {\n                \"sourceStatus\": \"ALARM\"\n            },\n            \"alarmSettings\": [\n                {\n                    \"key\": \"tolerance\",\n                    \"value\": \"50\"\n                },\n                {\n                    \"key\": \"min\",\n                    \"value\": \"32000\"\n                },\n                {\n                    \"key\": \"max\",\n                    \"value\": \"1000000000\"\n                }\n            ]\n        }\n    },\n    {\n        \"id\": 11,\n        \"policyId\": 3,\n        \"eventSettings\": {\n            \"eventStatus\": {\n                \"sourceStatus\": \"DISABLED\",\n                \"targetStatus\": \"NOT_APPLICABLE\"\n            },\n            \"alarmSettings\": [\n                {\n                    \"key\": \"period-count\",\n                    \"value\": \"6\"\n                },\n                {\n                    \"key\": \"addresses-per-body\",\n                    \"value\": \"20\"\n                }\n            ]\n        }\n    }\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/policy/system/events",
											"protocol": "https",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"smc-configuration",
												"rest",
												"v1",
												"tenants",
												":tenant_id",
												"policy",
												"system",
												"events"
											],
											"variable": [
												{
													"key": "tenant_id",
													"value": null,
													"description": "Integer - ID of desired tenant"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update System Policy Role Policy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
													"if (xsrf != \"\"){",
													"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"Cisco ALP - POs - Role Policy\",\n  \"description\": \"Critical role policy\",\n  \"tags\": [\n    10,\n    11\n  ],\n  \"ipAddressRanges\": [\n    \"10.0.0.1\"\n  ],\n  \"events\": [\n    {\n      \"id\": 8,\n      \"type\": \"SECURITY\",\n      \"eventSettings\": {\n        \"eventStatus\": {\n          \"sourceStatus\": \"ENABLED\",\n          \"targetStatus\": \"ALARM\"\n        },\n        \"alarmSettings\": [\n          {\n            \"key\": \"threshold\",\n            \"value\": \"150\"\n          }\n        ]\n      }\n    },\n    {\n      \"id\": 46,\n      \"type\": \"CATEGORY\",\n      \"eventSettings\": {\n        \"eventStatus\": {\n          \"sourceStatus\": \"ALARM\"\n        },\n        \"alarmSettings\": [\n          {\n            \"key\": \"tolerance\",\n            \"value\": \"95\"\n          },\n          {\n            \"key\": \"min\",\n            \"value\": \"32000\"\n          },\n          {\n            \"key\": \"max\",\n            \"value\": \"500000\"\n          }\n        ]\n      }\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/policy/system/role-policy",
											"protocol": "https",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"smc-configuration",
												"rest",
												"v1",
												"tenants",
												":tenant_id",
												"policy",
												"system",
												"role-policy"
											],
											"variable": [
												{
													"key": "tenant_id",
													"value": null,
													"description": "Integer - ID of desired tenant"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create System Policy Role Policy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
													"if (xsrf != \"\"){",
													"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"Cisco ALP - POs - Role Policy\",\n  \"description\": \"Critical role policy\",\n  \"tags\": [\n    10,\n    11\n  ],\n  \"ipAddressRanges\": [\n    \"10.0.0.1\"\n  ],\n  \"events\": [\n    {\n      \"id\": 8,\n      \"type\": \"SECURITY\",\n      \"eventSettings\": {\n        \"eventStatus\": {\n          \"sourceStatus\": \"ENABLED\",\n          \"targetStatus\": \"ALARM\"\n        },\n        \"alarmSettings\": [\n          {\n            \"key\": \"threshold\",\n            \"value\": \"150\"\n          }\n        ]\n      }\n    },\n    {\n      \"id\": 46,\n      \"type\": \"CATEGORY\",\n      \"eventSettings\": {\n        \"eventStatus\": {\n          \"sourceStatus\": \"ALARM\"\n        },\n        \"alarmSettings\": [\n          {\n            \"key\": \"tolerance\",\n            \"value\": \"95\"\n          },\n          {\n            \"key\": \"min\",\n            \"value\": \"32000\"\n          },\n          {\n            \"key\": \"max\",\n            \"value\": \"500000\"\n          }\n        ]\n      }\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/policy/system/role-policy",
											"protocol": "https",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"smc-configuration",
												"rest",
												"v1",
												"tenants",
												":tenant_id",
												"policy",
												"system",
												"role-policy"
											],
											"variable": [
												{
													"key": "tenant_id",
													"value": null,
													"description": "Integer - ID of desired tenant"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete System Policy Role Policy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
													"if (xsrf != \"\"){",
													"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/policy/system/role-policy/:policy_id",
											"protocol": "https",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"smc-configuration",
												"rest",
												"v1",
												"tenants",
												":tenant_id",
												"policy",
												"system",
												"role-policy",
												":policy_id"
											],
											"variable": [
												{
													"key": "tenant_id",
													"value": null,
													"description": "Integer - ID of desired tenant"
												},
												{
													"key": "policy_id",
													"value": null,
													"description": "Integer - The policy ID."
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create System Policy Host Policy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
													"if (xsrf != \"\"){",
													"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"ipAddress\": \"10.0.0.1\",\n    \"description\": \"Critical host policy\",\n    \"events\": [\n        {\n            \"id\": 8,\n            \"type\": \"SECURITY\",\n            \"eventSettings\": {\n                \"eventStatus\": {\n                    \"sourceStatus\": \"ENABLED\",\n                    \"targetStatus\": \"ALARM\"\n                },\n                \"alarmSettings\": [\n                    {\n                        \"key\": \"threshold\",\n                        \"value\": \"150\"\n                    }\n                ]\n            }\n        },\n        {\n            \"id\": 46,\n            \"type\": \"CATEGORY\",\n            \"eventSettings\": {\n                \"eventStatus\": {\n                    \"sourceStatus\": \"ALARM\"\n                },\n                \"alarmSettings\": [\n                    {\n                        \"key\": \"tolerance\",\n                        \"value\": \"95\"\n                    },\n                    {\n                        \"key\": \"min\",\n                        \"value\": \"32000\"\n                    },\n                    {\n                        \"key\": \"max\",\n                        \"value\": \"500000\"\n                    }\n                ]\n            }\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/policy/system/host-policy",
											"protocol": "https",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"smc-configuration",
												"rest",
												"v1",
												"tenants",
												":tenant_id",
												"policy",
												"system",
												"host-policy"
											],
											"variable": [
												{
													"key": "tenant_id",
													"value": null,
													"description": "Integer - ID of desired tenant"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update System Policy Host Policy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
													"if (xsrf != \"\"){",
													"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"ipAddress\": \"10.0.0.1\",\n    \"description\": \"Critical host policy\",\n    \"events\": [\n        {\n            \"id\": 8,\n            \"type\": \"SECURITY\",\n            \"eventSettings\": {\n                \"eventStatus\": {\n                    \"sourceStatus\": \"ENABLED\",\n                    \"targetStatus\": \"ALARM\"\n                },\n                \"alarmSettings\": [\n                    {\n                        \"key\": \"threshold\",\n                        \"value\": \"150\"\n                    }\n                ]\n            }\n        },\n        {\n            \"id\": 46,\n            \"type\": \"CATEGORY\",\n            \"eventSettings\": {\n                \"eventStatus\": {\n                    \"sourceStatus\": \"ALARM\"\n                },\n                \"alarmSettings\": [\n                    {\n                        \"key\": \"tolerance\",\n                        \"value\": \"95\"\n                    },\n                    {\n                        \"key\": \"min\",\n                        \"value\": \"32000\"\n                    },\n                    {\n                        \"key\": \"max\",\n                        \"value\": \"500000\"\n                    }\n                ]\n            }\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/policy/system/host-policy",
											"protocol": "https",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"smc-configuration",
												"rest",
												"v1",
												"tenants",
												":tenant_id",
												"policy",
												"system",
												"host-policy"
											],
											"variable": [
												{
													"key": "tenant_id",
													"value": null,
													"description": "Integer - ID of desired tenant"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete System Policy Host Policy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
													"if (xsrf != \"\"){",
													"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/policy/system/host-policy/:policy_id",
											"protocol": "https",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"smc-configuration",
												"rest",
												"v1",
												"tenants",
												":tenant_id",
												"policy",
												"system",
												"host-policy",
												":policy_id"
											],
											"variable": [
												{
													"key": "tenant_id",
													"value": null,
													"description": "Integer - ID of desired tenant"
												},
												{
													"key": "policy_id",
													"value": null
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Relationship",
							"item": [
								{
									"name": "Get Policy Relationship",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
													"if (xsrf != \"\"){",
													"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {},
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/policy/relationship/:policy_id",
											"protocol": "https",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"smc-configuration",
												"rest",
												"v1",
												"tenants",
												":tenant_id",
												"policy",
												"relationship",
												":policy_id"
											],
											"variable": [
												{
													"key": "tenant_id",
													"value": null,
													"description": "Integer - ID of desired tenant"
												},
												{
													"key": "policy_id",
													"value": null,
													"description": "Integer - A single policy ID."
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Policy Relationship Events",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
													"if (xsrf != \"\"){",
													"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {},
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/policy/relationship/events?tagId",
											"protocol": "https",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"smc-configuration",
												"rest",
												"v1",
												"tenants",
												":tenant_id",
												"policy",
												"relationship",
												"events"
											],
											"query": [
												{
													"key": "tagId",
													"value": null,
													"description": "A single tag Id used to filter the results for policies that explicitly include the tag."
												}
											],
											"variable": [
												{
													"key": "tenant_id",
													"value": null,
													"description": "Integer - ID of desired tenant"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Policy Relationship Events",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
													"if (xsrf != \"\"){",
													"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"id\": 7001,\n        \"policyId\": 123,\n        \"alarmSettings\": {\n            \"tolerance\": 50,\n            \"minimum\": 3600,\n            \"maximum\": 240000,\n            \"duration\": 10\n        }\n    },\n    {\n        \"id\": 7001,\n        \"policyId\": 134,\n        \"alarmSettings\": {\n            \"tolerance\": 50,\n            \"minimum\": 1200,\n            \"maximum\": 400000,\n            \"duration\": 20\n        }\n    },\n    {\n        \"id\": 7004,\n        \"policyId\": 123,\n        \"alarmSettings\": {\n            \"tolerance\": 50,\n            \"minimum\": 2400,\n            \"maximum\": 420000,\n            \"duration\": 15\n        }\n    },\n    {\n        \"id\": 7011,\n        \"policyId\": 45,\n        \"alarmSettings\": {\n            \"tolerance\": 50,\n            \"minimum\": 3600,\n            \"maximum\": 360000,\n            \"duration\": 25\n        }\n    }\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/policy/relationship/events",
											"protocol": "https",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"smc-configuration",
												"rest",
												"v1",
												"tenants",
												":tenant_id",
												"policy",
												"relationship",
												"events"
											],
											"variable": [
												{
													"key": "tenant_id",
													"value": null,
													"description": "Integer - ID of desired tenant"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Policy Relationship Events",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
													"if (xsrf != \"\"){",
													"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"id\": 7001,\n        \"policyId\": 123,\n        \"alarmSettings\": {\n            \"tolerance\": 50,\n            \"minimum\": 3600,\n            \"maximum\": 240000,\n            \"duration\": 10\n        }\n    },\n    {\n        \"id\": 7001,\n        \"policyId\": 134,\n        \"alarmSettings\": {\n            \"tolerance\": 50,\n            \"minimum\": 1200,\n            \"maximum\": 400000,\n            \"duration\": 20\n        }\n    },\n    {\n        \"id\": 7004,\n        \"policyId\": 123,\n        \"alarmSettings\": {\n            \"tolerance\": 50,\n            \"minimum\": 2400,\n            \"maximum\": 420000,\n            \"duration\": 15\n        }\n    },\n    {\n        \"id\": 7011,\n        \"policyId\": 45,\n        \"alarmSettings\": {\n            \"tolerance\": 50,\n            \"minimum\": 3600,\n            \"maximum\": 360000,\n            \"duration\": 25\n        }\n    }\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/policy/relationship/events",
											"protocol": "https",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"smc-configuration",
												"rest",
												"v1",
												"tenants",
												":tenant_id",
												"policy",
												"relationship",
												"events"
											],
											"variable": [
												{
													"key": "tenant_id",
													"value": null,
													"description": "Integer - ID of desired tenant"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Policy Relationship Events",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
													"if (xsrf != \"\"){",
													"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"id\": 7001,\n        \"policyId\": 123\n    },\n    {\n        \"id\": 7001,\n        \"policyId\": 134\n    },\n    {\n        \"id\": 7004,\n        \"policyId\": 123\n    },\n    {\n        \"id\": 7011,\n        \"policyId\": 45\n    }\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/policy/relationship/events",
											"protocol": "https",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"smc-configuration",
												"rest",
												"v1",
												"tenants",
												":tenant_id",
												"policy",
												"relationship",
												"events"
											],
											"variable": [
												{
													"key": "tenant_id",
													"value": null,
													"description": "Integer - ID of desired tenant"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search Policy Relationship Events",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
													"if (xsrf != \"\"){",
													"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {},
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"id\": 7001,\n        \"policyId\": 123\n    },\n    {\n        \"id\": 7001,\n        \"policyId\": 134\n    },\n    {\n        \"id\": 7004,\n        \"policyId\": 123\n    },\n    {\n        \"id\": 7011,\n        \"policyId\": 45\n    }\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/policy/relationship/events/search",
											"protocol": "https",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"smc-configuration",
												"rest",
												"v1",
												"tenants",
												":tenant_id",
												"policy",
												"relationship",
												"events",
												"search"
											],
											"query": [
												{
													"key": "eventName",
													"value": null,
													"description": "A single event name.",
													"disabled": true
												},
												{
													"key": "hostGroupName",
													"value": null,
													"description": "A single hostgroup name.",
													"disabled": true
												},
												{
													"key": "policyName",
													"value": null,
													"description": "A single policy name.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "tenant_id",
													"value": null,
													"description": "Integer - ID of desired tenant"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Relationship Policy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
													"if (xsrf != \"\"){",
													"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Citrix Install\",\n    \"description\": \"Citrix Install Policy\",\n    \"hostGroup1Id\": 1,\n    \"hostGroup2Id\": 2,\n    \"diagramId\": \"25adbd08-1af3-11e9-ab14-d663bd873d93\",\n    \"diagramName\": \"Functional Map\",\n    \"status\": true,\n    \"monitorTraffic\": {\n        \"mode\": \"include\",\n        \"except\": {\n            \"applications\": [\n                103119,\n                103120,\n                103121\n            ],\n            \"services\": [\n                60114,\n                60034,\n                60107\n            ]\n        }\n    },\n    \"policyEvents\": [\n        {\n            \"id\": 7001,\n            \"alarmSettings\": {\n                \"tolerance\": 50,\n                \"minimum\": 2400,\n                \"maximum\": 500000,\n                \"duration\": 10,\n                \"enabled\": true\n            }\n        },\n        {\n            \"id\": 7011,\n            \"alarmSettings\": {\n                \"tolerance\": 50,\n                \"minimum\": 4200,\n                \"maximum\": 420000,\n                \"duration\": 20,\n                \"enabled\": false\n            }\n        },\n        {\n            \"id\": 7002,\n            \"alarmSettings\": {\n                \"tolerance\": 50,\n                \"minimum\": 4200,\n                \"maximum\": 420000,\n                \"duration\": 20,\n                \"enabled\": false\n            }\n        },\n        {\n            \"id\": 7004,\n            \"alarmSettings\": {\n                \"tolerance\": 60,\n                \"minimum\": 5400,\n                \"maximum\": 600000,\n                \"duration\": 20,\n                \"enabled\": true\n            }\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/policy/relationship/configure",
											"protocol": "https",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"smc-configuration",
												"rest",
												"v1",
												"tenants",
												":tenant_id",
												"policy",
												"relationship",
												"configure"
											],
											"variable": [
												{
													"key": "tenant_id",
													"value": null,
													"description": "Integer - ID of desired tenant"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Relationship Policy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
													"if (xsrf != \"\"){",
													"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Citrix Install\",\n    \"description\": \"Citrix Install Policy\",\n    \"hostGroup1Id\": 1,\n    \"hostGroup2Id\": 2,\n    \"diagramId\": \"25adbd08-1af3-11e9-ab14-d663bd873d93\",\n    \"diagramName\": \"Functional Map\",\n    \"status\": true,\n    \"monitorTraffic\": {\n        \"mode\": \"include\",\n        \"except\": {\n            \"applications\": [\n                103119,\n                103120,\n                103121\n            ],\n            \"services\": [\n                60114,\n                60034,\n                60107\n            ]\n        }\n    },\n    \"policyEvents\": [\n        {\n            \"id\": 7001,\n            \"alarmSettings\": {\n                \"tolerance\": 50,\n                \"minimum\": 2400,\n                \"maximum\": 500000,\n                \"duration\": 10,\n                \"enabled\": true\n            }\n        },\n        {\n            \"id\": 7011,\n            \"alarmSettings\": {\n                \"tolerance\": 50,\n                \"minimum\": 4200,\n                \"maximum\": 420000,\n                \"duration\": 20,\n                \"enabled\": false\n            }\n        },\n        {\n            \"id\": 7002,\n            \"alarmSettings\": {\n                \"tolerance\": 50,\n                \"minimum\": 4200,\n                \"maximum\": 420000,\n                \"duration\": 20,\n                \"enabled\": false\n            }\n        },\n        {\n            \"id\": 7004,\n            \"alarmSettings\": {\n                \"tolerance\": 60,\n                \"minimum\": 5400,\n                \"maximum\": 600000,\n                \"duration\": 20,\n                \"enabled\": true\n            }\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/policy/relationship/configure",
											"protocol": "https",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"smc-configuration",
												"rest",
												"v1",
												"tenants",
												":tenant_id",
												"policy",
												"relationship",
												"configure"
											],
											"variable": [
												{
													"key": "tenant_id",
													"value": null,
													"description": "Integer - ID of desired tenant"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Relationship Policy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
													"if (xsrf != \"\"){",
													"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Citrix Install\",\n    \"description\": \"Citrix Install Policy\",\n    \"hostGroup1Id\": 1,\n    \"hostGroup2Id\": 2,\n    \"diagramId\": \"25adbd08-1af3-11e9-ab14-d663bd873d93\",\n    \"diagramName\": \"Functional Map\",\n    \"status\": true,\n    \"monitorTraffic\": {\n        \"mode\": \"include\",\n        \"except\": {\n            \"applications\": [\n                103119,\n                103120,\n                103121\n            ],\n            \"services\": [\n                60114,\n                60034,\n                60107\n            ]\n        }\n    },\n    \"policyEvents\": [\n        {\n            \"id\": 7001,\n            \"alarmSettings\": {\n                \"tolerance\": 50,\n                \"minimum\": 2400,\n                \"maximum\": 500000,\n                \"duration\": 10,\n                \"enabled\": true\n            }\n        },\n        {\n            \"id\": 7011,\n            \"alarmSettings\": {\n                \"tolerance\": 50,\n                \"minimum\": 4200,\n                \"maximum\": 420000,\n                \"duration\": 20,\n                \"enabled\": false\n            }\n        },\n        {\n            \"id\": 7002,\n            \"alarmSettings\": {\n                \"tolerance\": 50,\n                \"minimum\": 4200,\n                \"maximum\": 420000,\n                \"duration\": 20,\n                \"enabled\": false\n            }\n        },\n        {\n            \"id\": 7004,\n            \"alarmSettings\": {\n                \"tolerance\": 60,\n                \"minimum\": 5400,\n                \"maximum\": 600000,\n                \"duration\": 20,\n                \"enabled\": true\n            }\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/policy/relationship/configure/:policy_id",
											"protocol": "https",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"smc-configuration",
												"rest",
												"v1",
												"tenants",
												":tenant_id",
												"policy",
												"relationship",
												"configure",
												":policy_id"
											],
											"variable": [
												{
													"key": "tenant_id",
													"value": null,
													"description": "Integer - ID of desired tenant"
												},
												{
													"key": "policy_id",
													"value": null,
													"description": "Integer - Policy ID"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Tags",
					"item": [
						{
							"name": "List Tags",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
											"if (xsrf != \"\"){",
											"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {},
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/tags",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"tags"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Tags",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
											"if (xsrf != \"\"){",
											"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"name\": \"End User Devices\",\n        \"location\": \"INSIDE\",\n        \"description\": \"Host Group for User Devices\",\n        \"ranges\": [\n            \"10.205.0.0/8\"\n        ],\n        \"hostBaselines\": false,\n        \"suppressExcludedServices\": true,\n        \"inverseSuppression\": false,\n        \"hostTrap\": false,\n        \"sendToCta\": false,\n        \"parentId\": 5\n    },\n    {\n        \"name\": \"VoIP\",\n        \"location\": \"INSIDE\",\n        \"description\": \"Host Group for VoIP\",\n        \"ranges\": [\n            \"172.16.0.0/12\"\n        ],\n        \"hostBaselines\": false,\n        \"suppressExcludedServices\": true,\n        \"inverseSuppression\": false,\n        \"hostTrap\": false,\n        \"sendToCta\": false,\n        \"parentId\": 5\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/tags",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"tags"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Tags",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
											"if (xsrf != \"\"){",
											"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"name\": \"End User Devices\",\n        \"location\": \"INSIDE\",\n        \"description\": \"Host Group for User Devices\",\n        \"ranges\": [\n            \"10.205.0.0/8\"\n        ],\n        \"hostBaselines\": false,\n        \"suppressExcludedServices\": true,\n        \"inverseSuppression\": false,\n        \"hostTrap\": false,\n        \"sendToCta\": false,\n        \"parentId\": 5\n    },\n    {\n        \"name\": \"VoIP\",\n        \"location\": \"INSIDE\",\n        \"description\": \"Host Group for VoIP\",\n        \"ranges\": [\n            \"172.16.0.0/12\"\n        ],\n        \"hostBaselines\": false,\n        \"suppressExcludedServices\": true,\n        \"inverseSuppression\": false,\n        \"hostTrap\": false,\n        \"sendToCta\": false,\n        \"parentId\": 5\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/tags",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"tags"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Tag Tree",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
											"if (xsrf != \"\"){",
											"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {},
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/tags/tree",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"tags",
										"tree"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Export Tags",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
											"if (xsrf != \"\"){",
											"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {},
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/tags/export",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"tags",
										"export"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Import Tags",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
											"if (xsrf != \"\"){",
											"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"value": "",
											"description": "The file to be uploaded",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/tags/import",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"tags",
										"import"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Tag",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
											"if (xsrf != \"\"){",
											"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {},
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/tags/:tag_id",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"tags",
										":tag_id"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "tag_id",
											"value": null,
											"description": "Integer - Tag ID"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Tag",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
											"if (xsrf != \"\"){",
											"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 3,\n    \"name\": \"End User Devices - updated\",\n    \"location\": \"INSIDE\",\n    \"description\": \"Host Group for User Devices - updated\",\n    \"ranges\": [\n        \"10.205.0.0/8\"\n    ],\n    \"hostBaselines\": false,\n    \"suppressExcludedServices\": true,\n    \"inverseSuppression\": false,\n    \"hostTrap\": false,\n    \"sendToCta\": false,\n    \"domainId\": 405,\n    \"parentId\": 5\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/tags/:tag_id",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"tags",
										":tag_id"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "tag_id",
											"value": null,
											"description": "Integer - Tag ID"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Tag",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
											"if (xsrf != \"\"){",
											"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/tags/:tag_id",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"tags",
										":tag_id"
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "tag_id",
											"value": null,
											"description": "Integer - Tag ID"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Import Tag",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
											"if (xsrf != \"\"){",
											"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"value": "",
											"description": "The file to be uploaded",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/tags/:tag_id/import",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"tags",
										":tag_id",
										"import"
									],
									"query": [
										{
											"key": "assignIds",
											"value": null,
											"description": "Boolean - This specifies API to assign new IDs for host groups having duplicate IDs.\nDefault value will be false, throw error on list of duplicate IDs.\nExample: true",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "tag_id",
											"value": null,
											"description": "Integer - Tag ID"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Export Tag",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
											"if (xsrf != \"\"){",
											"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {},
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"value": "",
											"description": "The file to be uploaded",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{hostname}}/smc-configuration/rest/v1/tenants/:tenant_id/tags/:tag_id/export",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-configuration",
										"rest",
										"v1",
										"tenants",
										":tenant_id",
										"tags",
										":tag_id",
										"export"
									],
									"query": [
										{
											"key": "includeChildren",
											"value": "",
											"description": "Boolean - This specifies API to include child host groups\nDefault value will be true, it includes all child host groups\nExample: true",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "tenant_id",
											"value": null,
											"description": "Integer - ID of desired tenant"
										},
										{
											"key": "tag_id",
											"value": null,
											"description": "Integer - Tag ID"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.sendRequest({",
							"      url:  \"https://\" + pm.collectionVariables.get(\"hostname\")+\"/token/v2/authenticate\", ",
							"      method: 'POST',",
							"      header: {",
							"        'Accept': 'application/json',",
							"        'Content-Type': 'application/x-www-form-urlencoded'",
							"      },",
							"      body: {",
							"          mode: 'urlencoded',",
							"          urlencoded: [",
							"            {key: \"username\", value: pm.collectionVariables.get(\"username\"), disabled: false},",
							"            {key: \"password\", value: pm.collectionVariables.get(\"password\"), disabled: false},",
							"        ]",
							"      }",
							"  }, function (err, res) {",
							"        pm.cookies.add(res.cookies.get('stealthwatch.jwt'))",
							"        pm.collectionVariables.set(\"x_xsrf_token\", pm.cookies.get('XSRF-TOKEN'))",
							"  });"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "User Mgmt",
			"item": [
				{
					"name": "User",
					"item": [
						{
							"name": "Create User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
											"if (xsrf != \"\"){",
											"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"userName\": \"admin\",\n    \"fullName\": \"Administrator\",\n    \"emailAddress\": \"admin@cisco.com\",\n    \"authenticationServiceName\": \"local\",\n    \"dataRoleId\": 1,\n    \"functionRoleIds\": [\n        1\n    ],\n    \"webFunctionRoleIds\": [\n        0,\n        1\n    ],\n    \"password\": \"lan411cope\",\n    \"isAdmin\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{hostname}}/smc-users/rest/v1/user",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-users",
										"rest",
										"v1",
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
											"if (xsrf != \"\"){",
											"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"userName\": \"admin\",\n    \"fullName\": \"Administrator\",\n    \"emailAddress\": \"admin@cisco.com\",\n    \"authenticationServiceName\": \"local\",\n    \"dataRoleId\": 1,\n    \"functionRoleIds\": [\n        1\n    ],\n    \"webFunctionRoleIds\": [\n        0,\n        1\n    ],\n    \"password\": \"lan411cope\",\n    \"isAdmin\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{hostname}}/smc-users/rest/v1/user/:user_name",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-users",
										"rest",
										"v1",
										"user",
										":user_name"
									],
									"variable": [
										{
											"key": "user_name",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
											"if (xsrf != \"\"){",
											"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{hostname}}/smc-users/rest/v1/user/:user_name",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-users",
										"rest",
										"v1",
										"user",
										":user_name"
									],
									"variable": [
										{
											"key": "user_name",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Change Users Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
											"if (xsrf != \"\"){",
											"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"password\": \"411lancope\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{hostname}}/smc-users/rest/v1/user/:user_name/password",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-users",
										"rest",
										"v1",
										"user",
										":user_name",
										"password"
									],
									"variable": [
										{
											"key": "user_name",
											"value": null
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Roles",
					"item": [
						{
							"name": "List Data Roles",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
											"if (xsrf != \"\"){",
											"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{hostname}}/smc-users/rest/v1/roles/data-roles",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-users",
										"rest",
										"v1",
										"roles",
										"data-roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Data Roles",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
											"if (xsrf != \"\"){",
											"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Test Data Role\",\n    \"description\": \"Test Description\",\n    \"permissions\": {\n        \"dataPermissions\": {\n            \"domain\": {\n                \"key\": \"domain\",\n                \"permission\": \"NONE\",\n                \"rules\": {\n                    \"502\": {\n                        \"key\": 502,\n                        \"permission\": \"READ_ONLY\",\n                        \"dataPermissions\": {\n                            \"swaId\": {\n                                \"key\": \"swaId\",\n                                \"permission\": \"NONE\",\n                                \"rules\": {\n                                    \"171\": {\n                                        \"key\": 171,\n                                        \"permission\": \"READ_WRITE\",\n                                        \"dataPermissions\": {}\n                                    }\n                                }\n                            },\n                            \"externalDevice\": {\n                                \"key\": \"externalDevice\",\n                                \"permission\": \"NONE\",\n                                \"rules\": {\n                                    \"121\": {\n                                        \"key\": 121,\n                                        \"permission\": \"READ_ONLY\",\n                                        \"dataPermissions\": {}\n                                    }\n                                }\n                            },\n                            \"tag\": {\n                                \"key\": \"tag\",\n                                \"permission\": \"NONE\",\n                                \"rules\": {\n                                    \"48\": {\n                                        \"key\": 48,\n                                        \"permission\": \"READ_WRITE\",\n                                        \"dataPermissions\": {}\n                                    },\n                                    \"63000\": {\n                                        \"key\": 63000,\n                                        \"permission\": \"READ_ONLY\",\n                                        \"dataPermissions\": {}\n                                    }\n                                }\n                            },\n                            \"swa\": {\n                                \"key\": \"swa\",\n                                \"permission\": \"NONE\",\n                                \"rules\": {\n                                    \"602\": {\n                                        \"key\": 602,\n                                        \"permission\": \"READ_ONLY\",\n                                        \"dataPermissions\": {\n                                            \"exporter\": {\n                                                \"key\": \"exporter\",\n                                                \"permission\": \"NONE\",\n                                                \"rules\": {\n                                                    \"10.203.0.1\": {\n                                                        \"key\": \"10.203.0.1\",\n                                                        \"permission\": \"READ_WRITE\",\n                                                        \"dataPermissions\": {}\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{hostname}}/smc-users/rest/v1/roles/data-roles",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-users",
										"rest",
										"v1",
										"roles",
										"data-roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Data Roles",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
											"if (xsrf != \"\"){",
											"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Test Data Role\",\n    \"description\": \"Test Description\",\n    \"permissions\": {\n        \"dataPermissions\": {\n            \"domain\": {\n                \"key\": \"domain\",\n                \"permission\": \"NONE\",\n                \"rules\": {\n                    \"502\": {\n                        \"key\": 502,\n                        \"permission\": \"READ_ONLY\",\n                        \"dataPermissions\": {\n                            \"swaId\": {\n                                \"key\": \"swaId\",\n                                \"permission\": \"NONE\",\n                                \"rules\": {\n                                    \"171\": {\n                                        \"key\": 171,\n                                        \"permission\": \"READ_WRITE\",\n                                        \"dataPermissions\": {}\n                                    }\n                                }\n                            },\n                            \"externalDevice\": {\n                                \"key\": \"externalDevice\",\n                                \"permission\": \"NONE\",\n                                \"rules\": {\n                                    \"121\": {\n                                        \"key\": 121,\n                                        \"permission\": \"READ_ONLY\",\n                                        \"dataPermissions\": {}\n                                    }\n                                }\n                            },\n                            \"tag\": {\n                                \"key\": \"tag\",\n                                \"permission\": \"NONE\",\n                                \"rules\": {\n                                    \"48\": {\n                                        \"key\": 48,\n                                        \"permission\": \"READ_WRITE\",\n                                        \"dataPermissions\": {}\n                                    },\n                                    \"63000\": {\n                                        \"key\": 63000,\n                                        \"permission\": \"READ_ONLY\",\n                                        \"dataPermissions\": {}\n                                    }\n                                }\n                            },\n                            \"swa\": {\n                                \"key\": \"swa\",\n                                \"permission\": \"NONE\",\n                                \"rules\": {\n                                    \"602\": {\n                                        \"key\": 602,\n                                        \"permission\": \"READ_ONLY\",\n                                        \"dataPermissions\": {\n                                            \"exporter\": {\n                                                \"key\": \"exporter\",\n                                                \"permission\": \"NONE\",\n                                                \"rules\": {\n                                                    \"10.203.0.1\": {\n                                                        \"key\": \"10.203.0.1\",\n                                                        \"permission\": \"READ_WRITE\",\n                                                        \"dataPermissions\": {}\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{hostname}}/smc-users/rest/v1/roles/data-roles",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-users",
										"rest",
										"v1",
										"roles",
										"data-roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Data Role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
											"if (xsrf != \"\"){",
											"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {},
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Test Data Role\",\n    \"description\": \"Test Description\",\n    \"permissions\": {\n        \"dataPermissions\": {\n            \"domain\": {\n                \"key\": \"domain\",\n                \"permission\": \"NONE\",\n                \"rules\": {\n                    \"502\": {\n                        \"key\": 502,\n                        \"permission\": \"READ_ONLY\",\n                        \"dataPermissions\": {\n                            \"swaId\": {\n                                \"key\": \"swaId\",\n                                \"permission\": \"NONE\",\n                                \"rules\": {\n                                    \"171\": {\n                                        \"key\": 171,\n                                        \"permission\": \"READ_WRITE\",\n                                        \"dataPermissions\": {}\n                                    }\n                                }\n                            },\n                            \"externalDevice\": {\n                                \"key\": \"externalDevice\",\n                                \"permission\": \"NONE\",\n                                \"rules\": {\n                                    \"121\": {\n                                        \"key\": 121,\n                                        \"permission\": \"READ_ONLY\",\n                                        \"dataPermissions\": {}\n                                    }\n                                }\n                            },\n                            \"tag\": {\n                                \"key\": \"tag\",\n                                \"permission\": \"NONE\",\n                                \"rules\": {\n                                    \"48\": {\n                                        \"key\": 48,\n                                        \"permission\": \"READ_WRITE\",\n                                        \"dataPermissions\": {}\n                                    },\n                                    \"63000\": {\n                                        \"key\": 63000,\n                                        \"permission\": \"READ_ONLY\",\n                                        \"dataPermissions\": {}\n                                    }\n                                }\n                            },\n                            \"swa\": {\n                                \"key\": \"swa\",\n                                \"permission\": \"NONE\",\n                                \"rules\": {\n                                    \"602\": {\n                                        \"key\": 602,\n                                        \"permission\": \"READ_ONLY\",\n                                        \"dataPermissions\": {\n                                            \"exporter\": {\n                                                \"key\": \"exporter\",\n                                                \"permission\": \"NONE\",\n                                                \"rules\": {\n                                                    \"10.203.0.1\": {\n                                                        \"key\": \"10.203.0.1\",\n                                                        \"permission\": \"READ_WRITE\",\n                                                        \"dataPermissions\": {}\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{hostname}}/smc-users/rest/v1/roles/data-roles/:data_role_id",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-users",
										"rest",
										"v1",
										"roles",
										"data-roles",
										":data_role_id"
									],
									"variable": [
										{
											"key": "data_role_id",
											"value": null,
											"description": "Integer - data role ID"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Data Role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
											"if (xsrf != \"\"){",
											"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Test Data Role\",\n    \"description\": \"Test Description\",\n    \"permissions\": {\n        \"dataPermissions\": {\n            \"domain\": {\n                \"key\": \"domain\",\n                \"permission\": \"NONE\",\n                \"rules\": {\n                    \"502\": {\n                        \"key\": 502,\n                        \"permission\": \"READ_ONLY\",\n                        \"dataPermissions\": {\n                            \"swaId\": {\n                                \"key\": \"swaId\",\n                                \"permission\": \"NONE\",\n                                \"rules\": {\n                                    \"171\": {\n                                        \"key\": 171,\n                                        \"permission\": \"READ_WRITE\",\n                                        \"dataPermissions\": {}\n                                    }\n                                }\n                            },\n                            \"externalDevice\": {\n                                \"key\": \"externalDevice\",\n                                \"permission\": \"NONE\",\n                                \"rules\": {\n                                    \"121\": {\n                                        \"key\": 121,\n                                        \"permission\": \"READ_ONLY\",\n                                        \"dataPermissions\": {}\n                                    }\n                                }\n                            },\n                            \"tag\": {\n                                \"key\": \"tag\",\n                                \"permission\": \"NONE\",\n                                \"rules\": {\n                                    \"48\": {\n                                        \"key\": 48,\n                                        \"permission\": \"READ_WRITE\",\n                                        \"dataPermissions\": {}\n                                    },\n                                    \"63000\": {\n                                        \"key\": 63000,\n                                        \"permission\": \"READ_ONLY\",\n                                        \"dataPermissions\": {}\n                                    }\n                                }\n                            },\n                            \"swa\": {\n                                \"key\": \"swa\",\n                                \"permission\": \"NONE\",\n                                \"rules\": {\n                                    \"602\": {\n                                        \"key\": 602,\n                                        \"permission\": \"READ_ONLY\",\n                                        \"dataPermissions\": {\n                                            \"exporter\": {\n                                                \"key\": \"exporter\",\n                                                \"permission\": \"NONE\",\n                                                \"rules\": {\n                                                    \"10.203.0.1\": {\n                                                        \"key\": \"10.203.0.1\",\n                                                        \"permission\": \"READ_WRITE\",\n                                                        \"dataPermissions\": {}\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{hostname}}/smc-users/rest/v1/roles/data-roles/:data_role_id",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-users",
										"rest",
										"v1",
										"roles",
										"data-roles",
										":data_role_id"
									],
									"variable": [
										{
											"key": "data_role_id",
											"value": null,
											"description": "Integer - data role ID"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Web Function Roles",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
											"if (xsrf != \"\"){",
											"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {},
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Test Data Role\",\n    \"description\": \"Test Description\",\n    \"permissions\": {\n        \"dataPermissions\": {\n            \"domain\": {\n                \"key\": \"domain\",\n                \"permission\": \"NONE\",\n                \"rules\": {\n                    \"502\": {\n                        \"key\": 502,\n                        \"permission\": \"READ_ONLY\",\n                        \"dataPermissions\": {\n                            \"swaId\": {\n                                \"key\": \"swaId\",\n                                \"permission\": \"NONE\",\n                                \"rules\": {\n                                    \"171\": {\n                                        \"key\": 171,\n                                        \"permission\": \"READ_WRITE\",\n                                        \"dataPermissions\": {}\n                                    }\n                                }\n                            },\n                            \"externalDevice\": {\n                                \"key\": \"externalDevice\",\n                                \"permission\": \"NONE\",\n                                \"rules\": {\n                                    \"121\": {\n                                        \"key\": 121,\n                                        \"permission\": \"READ_ONLY\",\n                                        \"dataPermissions\": {}\n                                    }\n                                }\n                            },\n                            \"tag\": {\n                                \"key\": \"tag\",\n                                \"permission\": \"NONE\",\n                                \"rules\": {\n                                    \"48\": {\n                                        \"key\": 48,\n                                        \"permission\": \"READ_WRITE\",\n                                        \"dataPermissions\": {}\n                                    },\n                                    \"63000\": {\n                                        \"key\": 63000,\n                                        \"permission\": \"READ_ONLY\",\n                                        \"dataPermissions\": {}\n                                    }\n                                }\n                            },\n                            \"swa\": {\n                                \"key\": \"swa\",\n                                \"permission\": \"NONE\",\n                                \"rules\": {\n                                    \"602\": {\n                                        \"key\": 602,\n                                        \"permission\": \"READ_ONLY\",\n                                        \"dataPermissions\": {\n                                            \"exporter\": {\n                                                \"key\": \"exporter\",\n                                                \"permission\": \"NONE\",\n                                                \"rules\": {\n                                                    \"10.203.0.1\": {\n                                                        \"key\": \"10.203.0.1\",\n                                                        \"permission\": \"READ_WRITE\",\n                                                        \"dataPermissions\": {}\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{hostname}}/smc-users/rest/v1/roles/webfunctionroles",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"smc-users",
										"rest",
										"v1",
										"roles",
										"webfunctionroles"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
									"if (xsrf != \"\"){",
									"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{hostname}}/smc-users/rest/v1/users",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"smc-users",
								"rest",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Authentication Services",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
									"if (xsrf != \"\"){",
									"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{hostname}}/smc-users/rest/v1/services/authentication-services",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"smc-users",
								"rest",
								"v1",
								"services",
								"authentication-services"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Password Policy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
									"if (xsrf != \"\"){",
									"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{hostname}}/smc-users/rest/v1/password-policy",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"smc-users",
								"rest",
								"v1",
								"password-policy"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
									"if (xsrf != \"\"){",
									"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"currentPassword\": \"411lancope\",\n    \"newPassword\": \"admin123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{hostname}}/smc-users/rest/v1/change-password",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"smc-users",
								"rest",
								"v1",
								"change-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Context",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"sna_tenant_id\", jsonData.data[0].id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let xsrf = pm.collectionVariables.get(\"x_xsrf_token\")",
									"if (xsrf != \"\"){",
									"    pm.request.headers.add(\"X-XSRF-TOKEN:\" + xsrf)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {},
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{hostname}}/smc-users/rest/v1/user-context",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"smc-users",
								"rest",
								"v1",
								"user-context"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.sendRequest({",
							"      url:  \"https://\" + pm.collectionVariables.get(\"hostname\")+\"/token/v2/authenticate\", ",
							"      method: 'POST',",
							"      header: {",
							"        'Accept': 'application/json',",
							"        'Content-Type': 'application/x-www-form-urlencoded'",
							"      },",
							"      body: {",
							"          mode: 'urlencoded',",
							"          urlencoded: [",
							"            {key: \"username\", value: pm.collectionVariables.get(\"username\"), disabled: false},",
							"            {key: \"password\", value: pm.collectionVariables.get(\"password\"), disabled: false},",
							"        ]",
							"      }",
							"  }, function (err, res) {",
							"        pm.cookies.add(res.cookies.get('stealthwatch.jwt'))",
							"        pm.collectionVariables.set(\"x_xsrf_token\", pm.cookies.get('XSRF-TOKEN'))",
							"  });"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "SOAP",
			"item": [
				{
					"name": "Get Host Snapshot",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/xml",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\">\n    <soapenv:Body>\n        <getHostSnapshot>\n            <host-filter domain-id=\"{{tenant_id}}\">\n                <host-selection>\n                    <ip-address-selection value=\"10.10.101.24\"/>\n                </host-selection>\n            </host-filter>\n        </getHostSnapshot>\n    </soapenv:Body>\n</soapenv:Envelope>"
						},
						"url": {
							"raw": "https://{{hostname}}/smc/swsService/hosts",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"smc",
								"swsService",
								"hosts"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Generate Access Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.collectionVariables.set(\"auth_cookie\", pm.cookies.get('stealthwatch.jwt'))",
							"pm.cookies.add(pm.cookies.get('stealthwatch.jwt'))",
							"pm.collectionVariables.set(\"x_xsrf_token\", pm.cookies.get('XSRF-TOKEN'))"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/xml",
						"type": "text"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "username",
							"value": "{{username}}",
							"type": "text"
						},
						{
							"key": "password",
							"value": "{{password}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://{{hostname}}/token/v2/authenticate",
					"protocol": "https",
					"host": [
						"{{hostname}}"
					],
					"path": [
						"token",
						"v2",
						"authenticate"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "hostname",
			"value": "192.168.30.50",
			"type": "string"
		},
		{
			"key": "username",
			"value": "admin",
			"type": "string"
		},
		{
			"key": "password",
			"value": "Cisco!2345",
			"type": "string"
		},
		{
			"key": "cookie",
			"value": "",
			"type": "string"
		},
		{
			"key": "x_xsrf_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "auth_cookie",
			"value": ""
		}
	]
}